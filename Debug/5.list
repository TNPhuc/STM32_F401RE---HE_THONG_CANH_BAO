
5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000396c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08003b0c  08003b0c  00013b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bc8  08003bc8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003bc8  08003bc8  00013bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003bd0  08003bd0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bd0  08003bd0  00013bd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003bd4  08003bd4  00013bd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003bd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  20000070  08003c48  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000016c  08003c48  0002016c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b3a4  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b19  00000000  00000000  0002b444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008c0  00000000  00000000  0002cf60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000810  00000000  00000000  0002d820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001707a  00000000  00000000  0002e030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b801  00000000  00000000  000450aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091c08  00000000  00000000  000508ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e24b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002708  00000000  00000000  000e2508  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003af4 	.word	0x08003af4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08003af4 	.word	0x08003af4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b086      	sub	sp, #24
 800057c:	af02      	add	r7, sp, #8
 800057e:	4603      	mov	r3, r0
 8000580:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000582:	79fb      	ldrb	r3, [r7, #7]
 8000584:	f023 030f 	bic.w	r3, r3, #15
 8000588:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	011b      	lsls	r3, r3, #4
 800058e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000590:	7bfb      	ldrb	r3, [r7, #15]
 8000592:	f043 030c 	orr.w	r3, r3, #12
 8000596:	b2db      	uxtb	r3, r3
 8000598:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800059a:	7bfb      	ldrb	r3, [r7, #15]
 800059c:	f043 0308 	orr.w	r3, r3, #8
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80005a4:	7bbb      	ldrb	r3, [r7, #14]
 80005a6:	f043 030c 	orr.w	r3, r3, #12
 80005aa:	b2db      	uxtb	r3, r3
 80005ac:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80005ae:	7bbb      	ldrb	r3, [r7, #14]
 80005b0:	f043 0308 	orr.w	r3, r3, #8
 80005b4:	b2db      	uxtb	r3, r3
 80005b6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80005b8:	f107 0208 	add.w	r2, r7, #8
 80005bc:	2364      	movs	r3, #100	; 0x64
 80005be:	9300      	str	r3, [sp, #0]
 80005c0:	2304      	movs	r3, #4
 80005c2:	214e      	movs	r1, #78	; 0x4e
 80005c4:	4803      	ldr	r0, [pc, #12]	; (80005d4 <lcd_send_cmd+0x5c>)
 80005c6:	f001 fef9 	bl	80023bc <HAL_I2C_Master_Transmit>
}
 80005ca:	bf00      	nop
 80005cc:	3710      	adds	r7, #16
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	200000a0 	.word	0x200000a0

080005d8 <lcd_send_data>:

void lcd_send_data (char data)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b086      	sub	sp, #24
 80005dc:	af02      	add	r7, sp, #8
 80005de:	4603      	mov	r3, r0
 80005e0:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80005e2:	79fb      	ldrb	r3, [r7, #7]
 80005e4:	f023 030f 	bic.w	r3, r3, #15
 80005e8:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80005ea:	79fb      	ldrb	r3, [r7, #7]
 80005ec:	011b      	lsls	r3, r3, #4
 80005ee:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80005f0:	7bfb      	ldrb	r3, [r7, #15]
 80005f2:	f043 030d 	orr.w	r3, r3, #13
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80005fa:	7bfb      	ldrb	r3, [r7, #15]
 80005fc:	f043 0309 	orr.w	r3, r3, #9
 8000600:	b2db      	uxtb	r3, r3
 8000602:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000604:	7bbb      	ldrb	r3, [r7, #14]
 8000606:	f043 030d 	orr.w	r3, r3, #13
 800060a:	b2db      	uxtb	r3, r3
 800060c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800060e:	7bbb      	ldrb	r3, [r7, #14]
 8000610:	f043 0309 	orr.w	r3, r3, #9
 8000614:	b2db      	uxtb	r3, r3
 8000616:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000618:	f107 0208 	add.w	r2, r7, #8
 800061c:	2364      	movs	r3, #100	; 0x64
 800061e:	9300      	str	r3, [sp, #0]
 8000620:	2304      	movs	r3, #4
 8000622:	214e      	movs	r1, #78	; 0x4e
 8000624:	4803      	ldr	r0, [pc, #12]	; (8000634 <lcd_send_data+0x5c>)
 8000626:	f001 fec9 	bl	80023bc <HAL_I2C_Master_Transmit>
}
 800062a:	bf00      	nop
 800062c:	3710      	adds	r7, #16
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	200000a0 	.word	0x200000a0

08000638 <lcd_init>:

void lcd_init (void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 800063c:	2033      	movs	r0, #51	; 0x33
 800063e:	f7ff ff9b 	bl	8000578 <lcd_send_cmd>
	lcd_send_cmd (0x32);
 8000642:	2032      	movs	r0, #50	; 0x32
 8000644:	f7ff ff98 	bl	8000578 <lcd_send_cmd>
	HAL_Delay(50);
 8000648:	2032      	movs	r0, #50	; 0x32
 800064a:	f000 fd19 	bl	8001080 <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 800064e:	2028      	movs	r0, #40	; 0x28
 8000650:	f7ff ff92 	bl	8000578 <lcd_send_cmd>
	HAL_Delay(50);
 8000654:	2032      	movs	r0, #50	; 0x32
 8000656:	f000 fd13 	bl	8001080 <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 800065a:	2001      	movs	r0, #1
 800065c:	f7ff ff8c 	bl	8000578 <lcd_send_cmd>
	HAL_Delay(50);
 8000660:	2032      	movs	r0, #50	; 0x32
 8000662:	f000 fd0d 	bl	8001080 <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 8000666:	2006      	movs	r0, #6
 8000668:	f7ff ff86 	bl	8000578 <lcd_send_cmd>
	HAL_Delay(50);
 800066c:	2032      	movs	r0, #50	; 0x32
 800066e:	f000 fd07 	bl	8001080 <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */	
 8000672:	200c      	movs	r0, #12
 8000674:	f7ff ff80 	bl	8000578 <lcd_send_cmd>
	HAL_Delay(50);
 8000678:	2032      	movs	r0, #50	; 0x32
 800067a:	f000 fd01 	bl	8001080 <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 800067e:	2002      	movs	r0, #2
 8000680:	f7ff ff7a 	bl	8000578 <lcd_send_cmd>
	HAL_Delay(50);
 8000684:	2032      	movs	r0, #50	; 0x32
 8000686:	f000 fcfb 	bl	8001080 <HAL_Delay>
	lcd_send_cmd (0x80);
 800068a:	2080      	movs	r0, #128	; 0x80
 800068c:	f7ff ff74 	bl	8000578 <lcd_send_cmd>
}
 8000690:	bf00      	nop
 8000692:	bd80      	pop	{r7, pc}

08000694 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800069c:	e006      	b.n	80006ac <lcd_send_string+0x18>
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	1c5a      	adds	r2, r3, #1
 80006a2:	607a      	str	r2, [r7, #4]
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	4618      	mov	r0, r3
 80006a8:	f7ff ff96 	bl	80005d8 <lcd_send_data>
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d1f4      	bne.n	800069e <lcd_send_string+0xa>
}
 80006b4:	bf00      	nop
 80006b6:	bf00      	nop
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}

080006be <lcd_clear_display>:

void lcd_clear_display (void)
{
 80006be:	b580      	push	{r7, lr}
 80006c0:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x01); //clear display
 80006c2:	2001      	movs	r0, #1
 80006c4:	f7ff ff58 	bl	8000578 <lcd_send_cmd>
}
 80006c8:	bf00      	nop
 80006ca:	bd80      	pop	{r7, pc}

080006cc <lcd_goto_XY>:

void lcd_goto_XY (int row, int col)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
 80006d4:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 1) 
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2b01      	cmp	r3, #1
 80006da:	d108      	bne.n	80006ee <lcd_goto_XY+0x22>
	{
		pos_Addr = 0x80 + row - 1 + col;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	b2da      	uxtb	r2, r3
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	4413      	add	r3, r2
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	337f      	adds	r3, #127	; 0x7f
 80006ea:	73fb      	strb	r3, [r7, #15]
 80006ec:	e008      	b.n	8000700 <lcd_goto_XY+0x34>
	}
	else
	{
		pos_Addr = 0x80 | (0x40 + col);
 80006ee:	683b      	ldr	r3, [r7, #0]
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	3340      	adds	r3, #64	; 0x40
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	b25b      	sxtb	r3, r3
 80006f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80006fc:	b25b      	sxtb	r3, r3
 80006fe:	73fb      	strb	r3, [r7, #15]
	}
	lcd_send_cmd(pos_Addr);
 8000700:	7bfb      	ldrb	r3, [r7, #15]
 8000702:	4618      	mov	r0, r3
 8000704:	f7ff ff38 	bl	8000578 <lcd_send_cmd>
}
 8000708:	bf00      	nop
 800070a:	3710      	adds	r7, #16
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <conguoi>:
//	    Error_Handler();
//	  }
//}

void conguoi ()
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 8000714:	2201      	movs	r2, #1
 8000716:	f44f 7180 	mov.w	r1, #256	; 0x100
 800071a:	483b      	ldr	r0, [pc, #236]	; (8000808 <conguoi+0xf8>)
 800071c:	f001 fccc 	bl	80020b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);
 8000720:	2201      	movs	r2, #1
 8000722:	2140      	movs	r1, #64	; 0x40
 8000724:	4838      	ldr	r0, [pc, #224]	; (8000808 <conguoi+0xf8>)
 8000726:	f001 fcc7 	bl	80020b8 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800072a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800072e:	f000 fca7 	bl	8001080 <HAL_Delay>
  	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 8000732:	2200      	movs	r2, #0
 8000734:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000738:	4833      	ldr	r0, [pc, #204]	; (8000808 <conguoi+0xf8>)
 800073a:	f001 fcbd 	bl	80020b8 <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
 800073e:	2200      	movs	r2, #0
 8000740:	2140      	movs	r1, #64	; 0x40
 8000742:	4831      	ldr	r0, [pc, #196]	; (8000808 <conguoi+0xf8>)
 8000744:	f001 fcb8 	bl	80020b8 <HAL_GPIO_WritePin>
  	HAL_Delay(500);
 8000748:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800074c:	f000 fc98 	bl	8001080 <HAL_Delay>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 8000750:	2201      	movs	r2, #1
 8000752:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000756:	482c      	ldr	r0, [pc, #176]	; (8000808 <conguoi+0xf8>)
 8000758:	f001 fcae 	bl	80020b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);
 800075c:	2201      	movs	r2, #1
 800075e:	2140      	movs	r1, #64	; 0x40
 8000760:	4829      	ldr	r0, [pc, #164]	; (8000808 <conguoi+0xf8>)
 8000762:	f001 fca9 	bl	80020b8 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000766:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800076a:	f000 fc89 	bl	8001080 <HAL_Delay>
  	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 800076e:	2200      	movs	r2, #0
 8000770:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000774:	4824      	ldr	r0, [pc, #144]	; (8000808 <conguoi+0xf8>)
 8000776:	f001 fc9f 	bl	80020b8 <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
 800077a:	2200      	movs	r2, #0
 800077c:	2140      	movs	r1, #64	; 0x40
 800077e:	4822      	ldr	r0, [pc, #136]	; (8000808 <conguoi+0xf8>)
 8000780:	f001 fc9a 	bl	80020b8 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000784:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000788:	f000 fc7a 	bl	8001080 <HAL_Delay>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 800078c:	2201      	movs	r2, #1
 800078e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000792:	481d      	ldr	r0, [pc, #116]	; (8000808 <conguoi+0xf8>)
 8000794:	f001 fc90 	bl	80020b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);
 8000798:	2201      	movs	r2, #1
 800079a:	2140      	movs	r1, #64	; 0x40
 800079c:	481a      	ldr	r0, [pc, #104]	; (8000808 <conguoi+0xf8>)
 800079e:	f001 fc8b 	bl	80020b8 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80007a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007a6:	f000 fc6b 	bl	8001080 <HAL_Delay>
  	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 80007aa:	2200      	movs	r2, #0
 80007ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007b0:	4815      	ldr	r0, [pc, #84]	; (8000808 <conguoi+0xf8>)
 80007b2:	f001 fc81 	bl	80020b8 <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
 80007b6:	2200      	movs	r2, #0
 80007b8:	2140      	movs	r1, #64	; 0x40
 80007ba:	4813      	ldr	r0, [pc, #76]	; (8000808 <conguoi+0xf8>)
 80007bc:	f001 fc7c 	bl	80020b8 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80007c0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007c4:	f000 fc5c 	bl	8001080 <HAL_Delay>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 80007c8:	2201      	movs	r2, #1
 80007ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007ce:	480e      	ldr	r0, [pc, #56]	; (8000808 <conguoi+0xf8>)
 80007d0:	f001 fc72 	bl	80020b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);
 80007d4:	2201      	movs	r2, #1
 80007d6:	2140      	movs	r1, #64	; 0x40
 80007d8:	480b      	ldr	r0, [pc, #44]	; (8000808 <conguoi+0xf8>)
 80007da:	f001 fc6d 	bl	80020b8 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80007de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007e2:	f000 fc4d 	bl	8001080 <HAL_Delay>
  	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 80007e6:	2200      	movs	r2, #0
 80007e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007ec:	4806      	ldr	r0, [pc, #24]	; (8000808 <conguoi+0xf8>)
 80007ee:	f001 fc63 	bl	80020b8 <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2140      	movs	r1, #64	; 0x40
 80007f6:	4804      	ldr	r0, [pc, #16]	; (8000808 <conguoi+0xf8>)
 80007f8:	f001 fc5e 	bl	80020b8 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80007fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000800:	f000 fc3e 	bl	8001080 <HAL_Delay>
}
 8000804:	bf00      	nop
 8000806:	bd80      	pop	{r7, pc}
 8000808:	40020000 	.word	0x40020000

0800080c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000810:	f000 fbc4 	bl	8000f9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000814:	f000 f8ee 	bl	80009f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000818:	f000 f9cc 	bl	8000bb4 <MX_GPIO_Init>
  MX_ADC1_Init();
 800081c:	f000 f94a 	bl	8000ab4 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000820:	f000 f99a 	bl	8000b58 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8000824:	f7ff ff08 	bl	8000638 <lcd_init>

  lcd_goto_XY(1,2);
 8000828:	2102      	movs	r1, #2
 800082a:	2001      	movs	r0, #1
 800082c:	f7ff ff4e 	bl	80006cc <lcd_goto_XY>
  lcd_send_string("DO AN NHOM 2");
 8000830:	4861      	ldr	r0, [pc, #388]	; (80009b8 <main+0x1ac>)
 8000832:	f7ff ff2f 	bl	8000694 <lcd_send_string>
  lcd_goto_XY(2,1);
 8000836:	2101      	movs	r1, #1
 8000838:	2002      	movs	r0, #2
 800083a:	f7ff ff47 	bl	80006cc <lcd_goto_XY>
  lcd_send_string("THUC TAP CO SO");
 800083e:	485f      	ldr	r0, [pc, #380]	; (80009bc <main+0x1b0>)
 8000840:	f7ff ff28 	bl	8000694 <lcd_send_string>
  HAL_Delay(3000);
 8000844:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000848:	f000 fc1a 	bl	8001080 <HAL_Delay>
  lcd_clear_display();
 800084c:	f7ff ff37 	bl	80006be <lcd_clear_display>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  /* -------------------- ADC LM35 --------------------*/
	  HAL_ADC_Start(&hadc1);
 8000850:	485b      	ldr	r0, [pc, #364]	; (80009c0 <main+0x1b4>)
 8000852:	f000 fc7d 	bl	8001150 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1,500);
 8000856:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800085a:	4859      	ldr	r0, [pc, #356]	; (80009c0 <main+0x1b4>)
 800085c:	f000 fd5f 	bl	800131e <HAL_ADC_PollForConversion>
	  temp = HAL_ADC_GetValue(&hadc1);
 8000860:	4857      	ldr	r0, [pc, #348]	; (80009c0 <main+0x1b4>)
 8000862:	f000 ff28 	bl	80016b6 <HAL_ADC_GetValue>
 8000866:	4603      	mov	r3, r0
 8000868:	4a56      	ldr	r2, [pc, #344]	; (80009c4 <main+0x1b8>)
 800086a:	6013      	str	r3, [r2, #0]
	  temp_val = (temp*330)/4095;
 800086c:	4b55      	ldr	r3, [pc, #340]	; (80009c4 <main+0x1b8>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8000874:	fb02 f203 	mul.w	r2, r2, r3
 8000878:	4b53      	ldr	r3, [pc, #332]	; (80009c8 <main+0x1bc>)
 800087a:	fba3 1302 	umull	r1, r3, r3, r2
 800087e:	1ad2      	subs	r2, r2, r3
 8000880:	0852      	lsrs	r2, r2, #1
 8000882:	4413      	add	r3, r2
 8000884:	0adb      	lsrs	r3, r3, #11
 8000886:	4a51      	ldr	r2, [pc, #324]	; (80009cc <main+0x1c0>)
 8000888:	6013      	str	r3, [r2, #0]
	  HAL_ADC_Stop(&hadc1);
 800088a:	484d      	ldr	r0, [pc, #308]	; (80009c0 <main+0x1b4>)
 800088c:	f000 fd14 	bl	80012b8 <HAL_ADC_Stop>
	  HAL_Delay(100);
 8000890:	2064      	movs	r0, #100	; 0x64
 8000892:	f000 fbf5 	bl	8001080 <HAL_Delay>
	  sprintf(tempVal, " TEMP: %02ld%cC ", temp_val, 0xdf);
 8000896:	4b4d      	ldr	r3, [pc, #308]	; (80009cc <main+0x1c0>)
 8000898:	681a      	ldr	r2, [r3, #0]
 800089a:	23df      	movs	r3, #223	; 0xdf
 800089c:	494c      	ldr	r1, [pc, #304]	; (80009d0 <main+0x1c4>)
 800089e:	484d      	ldr	r0, [pc, #308]	; (80009d4 <main+0x1c8>)
 80008a0:	f002 fcfa 	bl	8003298 <siprintf>
	  lcd_goto_XY(1,2);
 80008a4:	2102      	movs	r1, #2
 80008a6:	2001      	movs	r0, #1
 80008a8:	f7ff ff10 	bl	80006cc <lcd_goto_XY>
	  lcd_send_string(tempVal);
 80008ac:	4849      	ldr	r0, [pc, #292]	; (80009d4 <main+0x1c8>)
 80008ae:	f7ff fef1 	bl	8000694 <lcd_send_string>
	  HAL_Delay(500);
 80008b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008b6:	f000 fbe3 	bl	8001080 <HAL_Delay>
	  if(temp_val >= 70)
 80008ba:	4b44      	ldr	r3, [pc, #272]	; (80009cc <main+0x1c0>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	2b45      	cmp	r3, #69	; 0x45
 80008c0:	d91f      	bls.n	8000902 <main+0xf6>
	  {
	  	lcd_goto_XY(2,0);
 80008c2:	2100      	movs	r1, #0
 80008c4:	2002      	movs	r0, #2
 80008c6:	f7ff ff01 	bl	80006cc <lcd_goto_XY>
	  	lcd_send_string("  NHIET DO CAO  ");
 80008ca:	4843      	ldr	r0, [pc, #268]	; (80009d8 <main+0x1cc>)
 80008cc:	f7ff fee2 	bl	8000694 <lcd_send_string>
	  	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin, 1);
 80008d0:	2201      	movs	r2, #1
 80008d2:	2180      	movs	r1, #128	; 0x80
 80008d4:	4841      	ldr	r0, [pc, #260]	; (80009dc <main+0x1d0>)
 80008d6:	f001 fbef 	bl	80020b8 <HAL_GPIO_WritePin>
	  	HAL_GPIO_WritePin(BUZZER_GPIO_Port,BUZZER_Pin, 1);
 80008da:	2201      	movs	r2, #1
 80008dc:	2140      	movs	r1, #64	; 0x40
 80008de:	483f      	ldr	r0, [pc, #252]	; (80009dc <main+0x1d0>)
 80008e0:	f001 fbea 	bl	80020b8 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 80008e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008e8:	f000 fbca 	bl	8001080 <HAL_Delay>
	  	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin, 0);
 80008ec:	2200      	movs	r2, #0
 80008ee:	2180      	movs	r1, #128	; 0x80
 80008f0:	483a      	ldr	r0, [pc, #232]	; (80009dc <main+0x1d0>)
 80008f2:	f001 fbe1 	bl	80020b8 <HAL_GPIO_WritePin>
	  	HAL_GPIO_WritePin(BUZZER_GPIO_Port,BUZZER_Pin, 0);
 80008f6:	2200      	movs	r2, #0
 80008f8:	2140      	movs	r1, #64	; 0x40
 80008fa:	4838      	ldr	r0, [pc, #224]	; (80009dc <main+0x1d0>)
 80008fc:	f001 fbdc 	bl	80020b8 <HAL_GPIO_WritePin>
 8000900:	e010      	b.n	8000924 <main+0x118>
	  }
	  else
	  {
		lcd_goto_XY(2,0);
 8000902:	2100      	movs	r1, #0
 8000904:	2002      	movs	r0, #2
 8000906:	f7ff fee1 	bl	80006cc <lcd_goto_XY>
		lcd_send_string("                ");
 800090a:	4835      	ldr	r0, [pc, #212]	; (80009e0 <main+0x1d4>)
 800090c:	f7ff fec2 	bl	8000694 <lcd_send_string>
	  	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_RESET);
 8000910:	2200      	movs	r2, #0
 8000912:	2180      	movs	r1, #128	; 0x80
 8000914:	4831      	ldr	r0, [pc, #196]	; (80009dc <main+0x1d0>)
 8000916:	f001 fbcf 	bl	80020b8 <HAL_GPIO_WritePin>
	  	HAL_GPIO_WritePin(BUZZER_GPIO_Port,BUZZER_Pin,GPIO_PIN_RESET);
 800091a:	2200      	movs	r2, #0
 800091c:	2140      	movs	r1, #64	; 0x40
 800091e:	482f      	ldr	r0, [pc, #188]	; (80009dc <main+0x1d0>)
 8000920:	f001 fbca 	bl	80020b8 <HAL_GPIO_WritePin>
	  }
	  /* -------------------- Nut bam 1 --------------------*/
	  button1_val = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);
 8000924:	2101      	movs	r1, #1
 8000926:	482f      	ldr	r0, [pc, #188]	; (80009e4 <main+0x1d8>)
 8000928:	f001 fbae 	bl	8002088 <HAL_GPIO_ReadPin>
 800092c:	4603      	mov	r3, r0
 800092e:	461a      	mov	r2, r3
 8000930:	4b2d      	ldr	r3, [pc, #180]	; (80009e8 <main+0x1dc>)
 8000932:	601a      	str	r2, [r3, #0]
	  if(button1_val == 0)
 8000934:	4b2c      	ldr	r3, [pc, #176]	; (80009e8 <main+0x1dc>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d109      	bne.n	8000950 <main+0x144>
	  {
		lcd_goto_XY(2,0);
 800093c:	2100      	movs	r1, #0
 800093e:	2002      	movs	r0, #2
 8000940:	f7ff fec4 	bl	80006cc <lcd_goto_XY>
		lcd_send_string("    CO NGUOI    ");
 8000944:	4829      	ldr	r0, [pc, #164]	; (80009ec <main+0x1e0>)
 8000946:	f7ff fea5 	bl	8000694 <lcd_send_string>
		conguoi();
 800094a:	f7ff fee1 	bl	8000710 <conguoi>
 800094e:	e00a      	b.n	8000966 <main+0x15a>
	  }
	  else
	  {
	  	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, RESET);
 8000950:	2200      	movs	r2, #0
 8000952:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000956:	4821      	ldr	r0, [pc, #132]	; (80009dc <main+0x1d0>)
 8000958:	f001 fbae 	bl	80020b8 <HAL_GPIO_WritePin>
	  	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, RESET);
 800095c:	2200      	movs	r2, #0
 800095e:	2140      	movs	r1, #64	; 0x40
 8000960:	481e      	ldr	r0, [pc, #120]	; (80009dc <main+0x1d0>)
 8000962:	f001 fba9 	bl	80020b8 <HAL_GPIO_WritePin>
	  }
	  /* -------------------- Nut bam 2 --------------------*/
	  if(HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin) == 0)
 8000966:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800096a:	481e      	ldr	r0, [pc, #120]	; (80009e4 <main+0x1d8>)
 800096c:	f001 fb8c 	bl	8002088 <HAL_GPIO_ReadPin>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	f47f af6c 	bne.w	8000850 <main+0x44>
	  {
		  while(HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin) == 0) {}
 8000978:	bf00      	nop
 800097a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800097e:	4819      	ldr	r0, [pc, #100]	; (80009e4 <main+0x1d8>)
 8000980:	f001 fb82 	bl	8002088 <HAL_GPIO_ReadPin>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d0f7      	beq.n	800097a <main+0x16e>
		  status =~ status;
 800098a:	4b19      	ldr	r3, [pc, #100]	; (80009f0 <main+0x1e4>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	43db      	mvns	r3, r3
 8000990:	b2da      	uxtb	r2, r3
 8000992:	4b17      	ldr	r3, [pc, #92]	; (80009f0 <main+0x1e4>)
 8000994:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, status);
 8000996:	4b16      	ldr	r3, [pc, #88]	; (80009f0 <main+0x1e4>)
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	461a      	mov	r2, r3
 800099c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009a0:	480e      	ldr	r0, [pc, #56]	; (80009dc <main+0x1d0>)
 80009a2:	f001 fb89 	bl	80020b8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, status);
 80009a6:	4b12      	ldr	r3, [pc, #72]	; (80009f0 <main+0x1e4>)
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	461a      	mov	r2, r3
 80009ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009b0:	480a      	ldr	r0, [pc, #40]	; (80009dc <main+0x1d0>)
 80009b2:	f001 fb81 	bl	80020b8 <HAL_GPIO_WritePin>
	  HAL_ADC_Start(&hadc1);
 80009b6:	e74b      	b.n	8000850 <main+0x44>
 80009b8:	08003b0c 	.word	0x08003b0c
 80009bc:	08003b1c 	.word	0x08003b1c
 80009c0:	200000f4 	.word	0x200000f4
 80009c4:	2000008c 	.word	0x2000008c
 80009c8:	00100101 	.word	0x00100101
 80009cc:	20000090 	.word	0x20000090
 80009d0:	08003b2c 	.word	0x08003b2c
 80009d4:	2000013c 	.word	0x2000013c
 80009d8:	08003b40 	.word	0x08003b40
 80009dc:	40020000 	.word	0x40020000
 80009e0:	08003b54 	.word	0x08003b54
 80009e4:	40020800 	.word	0x40020800
 80009e8:	20000150 	.word	0x20000150
 80009ec:	08003b68 	.word	0x08003b68
 80009f0:	20000154 	.word	0x20000154

080009f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b094      	sub	sp, #80	; 0x50
 80009f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009fa:	f107 0320 	add.w	r3, r7, #32
 80009fe:	2230      	movs	r2, #48	; 0x30
 8000a00:	2100      	movs	r1, #0
 8000a02:	4618      	mov	r0, r3
 8000a04:	f002 fc40 	bl	8003288 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a08:	f107 030c 	add.w	r3, r7, #12
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
 8000a16:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a18:	2300      	movs	r3, #0
 8000a1a:	60bb      	str	r3, [r7, #8]
 8000a1c:	4b23      	ldr	r3, [pc, #140]	; (8000aac <SystemClock_Config+0xb8>)
 8000a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a20:	4a22      	ldr	r2, [pc, #136]	; (8000aac <SystemClock_Config+0xb8>)
 8000a22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a26:	6413      	str	r3, [r2, #64]	; 0x40
 8000a28:	4b20      	ldr	r3, [pc, #128]	; (8000aac <SystemClock_Config+0xb8>)
 8000a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a30:	60bb      	str	r3, [r7, #8]
 8000a32:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a34:	2300      	movs	r3, #0
 8000a36:	607b      	str	r3, [r7, #4]
 8000a38:	4b1d      	ldr	r3, [pc, #116]	; (8000ab0 <SystemClock_Config+0xbc>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a40:	4a1b      	ldr	r2, [pc, #108]	; (8000ab0 <SystemClock_Config+0xbc>)
 8000a42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a46:	6013      	str	r3, [r2, #0]
 8000a48:	4b19      	ldr	r3, [pc, #100]	; (8000ab0 <SystemClock_Config+0xbc>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a50:	607b      	str	r3, [r7, #4]
 8000a52:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a54:	2302      	movs	r3, #2
 8000a56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a5c:	2310      	movs	r3, #16
 8000a5e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a60:	2300      	movs	r3, #0
 8000a62:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a64:	f107 0320 	add.w	r3, r7, #32
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f001 ffaf 	bl	80029cc <HAL_RCC_OscConfig>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000a74:	f000 f922 	bl	8000cbc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a78:	230f      	movs	r3, #15
 8000a7a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a80:	2300      	movs	r3, #0
 8000a82:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a84:	2300      	movs	r3, #0
 8000a86:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a8c:	f107 030c 	add.w	r3, r7, #12
 8000a90:	2100      	movs	r1, #0
 8000a92:	4618      	mov	r0, r3
 8000a94:	f002 fa12 	bl	8002ebc <HAL_RCC_ClockConfig>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000a9e:	f000 f90d 	bl	8000cbc <Error_Handler>
  }
}
 8000aa2:	bf00      	nop
 8000aa4:	3750      	adds	r7, #80	; 0x50
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40023800 	.word	0x40023800
 8000ab0:	40007000 	.word	0x40007000

08000ab4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000aba:	463b      	mov	r3, r7
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	605a      	str	r2, [r3, #4]
 8000ac2:	609a      	str	r2, [r3, #8]
 8000ac4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ac6:	4b21      	ldr	r3, [pc, #132]	; (8000b4c <MX_ADC1_Init+0x98>)
 8000ac8:	4a21      	ldr	r2, [pc, #132]	; (8000b50 <MX_ADC1_Init+0x9c>)
 8000aca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000acc:	4b1f      	ldr	r3, [pc, #124]	; (8000b4c <MX_ADC1_Init+0x98>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ad2:	4b1e      	ldr	r3, [pc, #120]	; (8000b4c <MX_ADC1_Init+0x98>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000ad8:	4b1c      	ldr	r3, [pc, #112]	; (8000b4c <MX_ADC1_Init+0x98>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ade:	4b1b      	ldr	r3, [pc, #108]	; (8000b4c <MX_ADC1_Init+0x98>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ae4:	4b19      	ldr	r3, [pc, #100]	; (8000b4c <MX_ADC1_Init+0x98>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000aec:	4b17      	ldr	r3, [pc, #92]	; (8000b4c <MX_ADC1_Init+0x98>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000af2:	4b16      	ldr	r3, [pc, #88]	; (8000b4c <MX_ADC1_Init+0x98>)
 8000af4:	4a17      	ldr	r2, [pc, #92]	; (8000b54 <MX_ADC1_Init+0xa0>)
 8000af6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000af8:	4b14      	ldr	r3, [pc, #80]	; (8000b4c <MX_ADC1_Init+0x98>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000afe:	4b13      	ldr	r3, [pc, #76]	; (8000b4c <MX_ADC1_Init+0x98>)
 8000b00:	2201      	movs	r2, #1
 8000b02:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000b04:	4b11      	ldr	r3, [pc, #68]	; (8000b4c <MX_ADC1_Init+0x98>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b0c:	4b0f      	ldr	r3, [pc, #60]	; (8000b4c <MX_ADC1_Init+0x98>)
 8000b0e:	2201      	movs	r2, #1
 8000b10:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b12:	480e      	ldr	r0, [pc, #56]	; (8000b4c <MX_ADC1_Init+0x98>)
 8000b14:	f000 fad8 	bl	80010c8 <HAL_ADC_Init>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000b1e:	f000 f8cd 	bl	8000cbc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000b22:	2301      	movs	r3, #1
 8000b24:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000b26:	2301      	movs	r3, #1
 8000b28:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b2e:	463b      	mov	r3, r7
 8000b30:	4619      	mov	r1, r3
 8000b32:	4806      	ldr	r0, [pc, #24]	; (8000b4c <MX_ADC1_Init+0x98>)
 8000b34:	f000 fdea 	bl	800170c <HAL_ADC_ConfigChannel>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000b3e:	f000 f8bd 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b42:	bf00      	nop
 8000b44:	3710      	adds	r7, #16
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	200000f4 	.word	0x200000f4
 8000b50:	40012000 	.word	0x40012000
 8000b54:	0f000001 	.word	0x0f000001

08000b58 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b5c:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <MX_I2C1_Init+0x50>)
 8000b5e:	4a13      	ldr	r2, [pc, #76]	; (8000bac <MX_I2C1_Init+0x54>)
 8000b60:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b62:	4b11      	ldr	r3, [pc, #68]	; (8000ba8 <MX_I2C1_Init+0x50>)
 8000b64:	4a12      	ldr	r2, [pc, #72]	; (8000bb0 <MX_I2C1_Init+0x58>)
 8000b66:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b68:	4b0f      	ldr	r3, [pc, #60]	; (8000ba8 <MX_I2C1_Init+0x50>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ba8 <MX_I2C1_Init+0x50>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b74:	4b0c      	ldr	r3, [pc, #48]	; (8000ba8 <MX_I2C1_Init+0x50>)
 8000b76:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b7a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b7c:	4b0a      	ldr	r3, [pc, #40]	; (8000ba8 <MX_I2C1_Init+0x50>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b82:	4b09      	ldr	r3, [pc, #36]	; (8000ba8 <MX_I2C1_Init+0x50>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b88:	4b07      	ldr	r3, [pc, #28]	; (8000ba8 <MX_I2C1_Init+0x50>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b8e:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <MX_I2C1_Init+0x50>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b94:	4804      	ldr	r0, [pc, #16]	; (8000ba8 <MX_I2C1_Init+0x50>)
 8000b96:	f001 facd 	bl	8002134 <HAL_I2C_Init>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ba0:	f000 f88c 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ba4:	bf00      	nop
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	200000a0 	.word	0x200000a0
 8000bac:	40005400 	.word	0x40005400
 8000bb0:	000186a0 	.word	0x000186a0

08000bb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b08a      	sub	sp, #40	; 0x28
 8000bb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bba:	f107 0314 	add.w	r3, r7, #20
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	605a      	str	r2, [r3, #4]
 8000bc4:	609a      	str	r2, [r3, #8]
 8000bc6:	60da      	str	r2, [r3, #12]
 8000bc8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	613b      	str	r3, [r7, #16]
 8000bce:	4b38      	ldr	r3, [pc, #224]	; (8000cb0 <MX_GPIO_Init+0xfc>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	4a37      	ldr	r2, [pc, #220]	; (8000cb0 <MX_GPIO_Init+0xfc>)
 8000bd4:	f043 0304 	orr.w	r3, r3, #4
 8000bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bda:	4b35      	ldr	r3, [pc, #212]	; (8000cb0 <MX_GPIO_Init+0xfc>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	f003 0304 	and.w	r3, r3, #4
 8000be2:	613b      	str	r3, [r7, #16]
 8000be4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	60fb      	str	r3, [r7, #12]
 8000bea:	4b31      	ldr	r3, [pc, #196]	; (8000cb0 <MX_GPIO_Init+0xfc>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	4a30      	ldr	r2, [pc, #192]	; (8000cb0 <MX_GPIO_Init+0xfc>)
 8000bf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf6:	4b2e      	ldr	r3, [pc, #184]	; (8000cb0 <MX_GPIO_Init+0xfc>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	60bb      	str	r3, [r7, #8]
 8000c06:	4b2a      	ldr	r3, [pc, #168]	; (8000cb0 <MX_GPIO_Init+0xfc>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	4a29      	ldr	r2, [pc, #164]	; (8000cb0 <MX_GPIO_Init+0xfc>)
 8000c0c:	f043 0301 	orr.w	r3, r3, #1
 8000c10:	6313      	str	r3, [r2, #48]	; 0x30
 8000c12:	4b27      	ldr	r3, [pc, #156]	; (8000cb0 <MX_GPIO_Init+0xfc>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	f003 0301 	and.w	r3, r3, #1
 8000c1a:	60bb      	str	r3, [r7, #8]
 8000c1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	607b      	str	r3, [r7, #4]
 8000c22:	4b23      	ldr	r3, [pc, #140]	; (8000cb0 <MX_GPIO_Init+0xfc>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	4a22      	ldr	r2, [pc, #136]	; (8000cb0 <MX_GPIO_Init+0xfc>)
 8000c28:	f043 0302 	orr.w	r3, r3, #2
 8000c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2e:	4b20      	ldr	r3, [pc, #128]	; (8000cb0 <MX_GPIO_Init+0xfc>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	f003 0302 	and.w	r3, r3, #2
 8000c36:	607b      	str	r3, [r7, #4]
 8000c38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|BUZZER_Pin|LED1_Pin|LED2_Pin
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 8000c40:	481c      	ldr	r0, [pc, #112]	; (8000cb4 <MX_GPIO_Init+0x100>)
 8000c42:	f001 fa39 	bl	80020b8 <HAL_GPIO_WritePin>
                          |LED3_Pin|RELAY_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON2_Pin;
 8000c46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON2_GPIO_Port, &GPIO_InitStruct);
 8000c54:	f107 0314 	add.w	r3, r7, #20
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4817      	ldr	r0, [pc, #92]	; (8000cb8 <MX_GPIO_Init+0x104>)
 8000c5c:	f001 f890 	bl	8001d80 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON1_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin;
 8000c60:	2301      	movs	r3, #1
 8000c62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c64:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON1_GPIO_Port, &GPIO_InitStruct);
 8000c6e:	f107 0314 	add.w	r3, r7, #20
 8000c72:	4619      	mov	r1, r3
 8000c74:	4810      	ldr	r0, [pc, #64]	; (8000cb8 <MX_GPIO_Init+0x104>)
 8000c76:	f001 f883 	bl	8001d80 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin BUZZER_Pin LED1_Pin LED2_Pin
                           LED3_Pin RELAY_Pin */
  GPIO_InitStruct.Pin = LED_Pin|BUZZER_Pin|LED1_Pin|LED2_Pin
 8000c7a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000c7e:	617b      	str	r3, [r7, #20]
                          |LED3_Pin|RELAY_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c80:	2301      	movs	r3, #1
 8000c82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c8c:	f107 0314 	add.w	r3, r7, #20
 8000c90:	4619      	mov	r1, r3
 8000c92:	4808      	ldr	r0, [pc, #32]	; (8000cb4 <MX_GPIO_Init+0x100>)
 8000c94:	f001 f874 	bl	8001d80 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	2101      	movs	r1, #1
 8000c9c:	2006      	movs	r0, #6
 8000c9e:	f001 f838 	bl	8001d12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000ca2:	2006      	movs	r0, #6
 8000ca4:	f001 f851 	bl	8001d4a <HAL_NVIC_EnableIRQ>

}
 8000ca8:	bf00      	nop
 8000caa:	3728      	adds	r7, #40	; 0x28
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	40023800 	.word	0x40023800
 8000cb4:	40020000 	.word	0x40020000
 8000cb8:	40020800 	.word	0x40020800

08000cbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cc0:	b672      	cpsid	i
}
 8000cc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cc4:	e7fe      	b.n	8000cc4 <Error_Handler+0x8>
	...

08000cc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	607b      	str	r3, [r7, #4]
 8000cd2:	4b10      	ldr	r3, [pc, #64]	; (8000d14 <HAL_MspInit+0x4c>)
 8000cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd6:	4a0f      	ldr	r2, [pc, #60]	; (8000d14 <HAL_MspInit+0x4c>)
 8000cd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cdc:	6453      	str	r3, [r2, #68]	; 0x44
 8000cde:	4b0d      	ldr	r3, [pc, #52]	; (8000d14 <HAL_MspInit+0x4c>)
 8000ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ce6:	607b      	str	r3, [r7, #4]
 8000ce8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	603b      	str	r3, [r7, #0]
 8000cee:	4b09      	ldr	r3, [pc, #36]	; (8000d14 <HAL_MspInit+0x4c>)
 8000cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf2:	4a08      	ldr	r2, [pc, #32]	; (8000d14 <HAL_MspInit+0x4c>)
 8000cf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cf8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cfa:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <HAL_MspInit+0x4c>)
 8000cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d02:	603b      	str	r3, [r7, #0]
 8000d04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d06:	bf00      	nop
 8000d08:	370c      	adds	r7, #12
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	40023800 	.word	0x40023800

08000d18 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b08a      	sub	sp, #40	; 0x28
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d20:	f107 0314 	add.w	r3, r7, #20
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	609a      	str	r2, [r3, #8]
 8000d2c:	60da      	str	r2, [r3, #12]
 8000d2e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a1b      	ldr	r2, [pc, #108]	; (8000da4 <HAL_ADC_MspInit+0x8c>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d12f      	bne.n	8000d9a <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	613b      	str	r3, [r7, #16]
 8000d3e:	4b1a      	ldr	r3, [pc, #104]	; (8000da8 <HAL_ADC_MspInit+0x90>)
 8000d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d42:	4a19      	ldr	r2, [pc, #100]	; (8000da8 <HAL_ADC_MspInit+0x90>)
 8000d44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d48:	6453      	str	r3, [r2, #68]	; 0x44
 8000d4a:	4b17      	ldr	r3, [pc, #92]	; (8000da8 <HAL_ADC_MspInit+0x90>)
 8000d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d52:	613b      	str	r3, [r7, #16]
 8000d54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	60fb      	str	r3, [r7, #12]
 8000d5a:	4b13      	ldr	r3, [pc, #76]	; (8000da8 <HAL_ADC_MspInit+0x90>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	4a12      	ldr	r2, [pc, #72]	; (8000da8 <HAL_ADC_MspInit+0x90>)
 8000d60:	f043 0301 	orr.w	r3, r3, #1
 8000d64:	6313      	str	r3, [r2, #48]	; 0x30
 8000d66:	4b10      	ldr	r3, [pc, #64]	; (8000da8 <HAL_ADC_MspInit+0x90>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	f003 0301 	and.w	r3, r3, #1
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000d72:	2302      	movs	r3, #2
 8000d74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d76:	2303      	movs	r3, #3
 8000d78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d7e:	f107 0314 	add.w	r3, r7, #20
 8000d82:	4619      	mov	r1, r3
 8000d84:	4809      	ldr	r0, [pc, #36]	; (8000dac <HAL_ADC_MspInit+0x94>)
 8000d86:	f000 fffb 	bl	8001d80 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	2012      	movs	r0, #18
 8000d90:	f000 ffbf 	bl	8001d12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000d94:	2012      	movs	r0, #18
 8000d96:	f000 ffd8 	bl	8001d4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d9a:	bf00      	nop
 8000d9c:	3728      	adds	r7, #40	; 0x28
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40012000 	.word	0x40012000
 8000da8:	40023800 	.word	0x40023800
 8000dac:	40020000 	.word	0x40020000

08000db0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b08a      	sub	sp, #40	; 0x28
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db8:	f107 0314 	add.w	r3, r7, #20
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]
 8000dc6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a19      	ldr	r2, [pc, #100]	; (8000e34 <HAL_I2C_MspInit+0x84>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d12c      	bne.n	8000e2c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	613b      	str	r3, [r7, #16]
 8000dd6:	4b18      	ldr	r3, [pc, #96]	; (8000e38 <HAL_I2C_MspInit+0x88>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	4a17      	ldr	r2, [pc, #92]	; (8000e38 <HAL_I2C_MspInit+0x88>)
 8000ddc:	f043 0302 	orr.w	r3, r3, #2
 8000de0:	6313      	str	r3, [r2, #48]	; 0x30
 8000de2:	4b15      	ldr	r3, [pc, #84]	; (8000e38 <HAL_I2C_MspInit+0x88>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	f003 0302 	and.w	r3, r3, #2
 8000dea:	613b      	str	r3, [r7, #16]
 8000dec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000dee:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000df2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000df4:	2312      	movs	r3, #18
 8000df6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfc:	2303      	movs	r3, #3
 8000dfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e00:	2304      	movs	r3, #4
 8000e02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e04:	f107 0314 	add.w	r3, r7, #20
 8000e08:	4619      	mov	r1, r3
 8000e0a:	480c      	ldr	r0, [pc, #48]	; (8000e3c <HAL_I2C_MspInit+0x8c>)
 8000e0c:	f000 ffb8 	bl	8001d80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e10:	2300      	movs	r3, #0
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	4b08      	ldr	r3, [pc, #32]	; (8000e38 <HAL_I2C_MspInit+0x88>)
 8000e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e18:	4a07      	ldr	r2, [pc, #28]	; (8000e38 <HAL_I2C_MspInit+0x88>)
 8000e1a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e1e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e20:	4b05      	ldr	r3, [pc, #20]	; (8000e38 <HAL_I2C_MspInit+0x88>)
 8000e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e2c:	bf00      	nop
 8000e2e:	3728      	adds	r7, #40	; 0x28
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	40005400 	.word	0x40005400
 8000e38:	40023800 	.word	0x40023800
 8000e3c:	40020400 	.word	0x40020400

08000e40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e44:	e7fe      	b.n	8000e44 <NMI_Handler+0x4>

08000e46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e46:	b480      	push	{r7}
 8000e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e4a:	e7fe      	b.n	8000e4a <HardFault_Handler+0x4>

08000e4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e50:	e7fe      	b.n	8000e50 <MemManage_Handler+0x4>

08000e52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e56:	e7fe      	b.n	8000e56 <BusFault_Handler+0x4>

08000e58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e5c:	e7fe      	b.n	8000e5c <UsageFault_Handler+0x4>

08000e5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e62:	bf00      	nop
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr

08000e6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr

08000e7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr

08000e88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e8c:	f000 f8d8 	bl	8001040 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e90:	bf00      	nop
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000e98:	2001      	movs	r0, #1
 8000e9a:	f001 f927 	bl	80020ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	bd80      	pop	{r7, pc}
	...

08000ea4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000ea8:	4802      	ldr	r0, [pc, #8]	; (8000eb4 <ADC_IRQHandler+0x10>)
 8000eaa:	f000 fac3 	bl	8001434 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	200000f4 	.word	0x200000f4

08000eb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ec0:	4a14      	ldr	r2, [pc, #80]	; (8000f14 <_sbrk+0x5c>)
 8000ec2:	4b15      	ldr	r3, [pc, #84]	; (8000f18 <_sbrk+0x60>)
 8000ec4:	1ad3      	subs	r3, r2, r3
 8000ec6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ecc:	4b13      	ldr	r3, [pc, #76]	; (8000f1c <_sbrk+0x64>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d102      	bne.n	8000eda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ed4:	4b11      	ldr	r3, [pc, #68]	; (8000f1c <_sbrk+0x64>)
 8000ed6:	4a12      	ldr	r2, [pc, #72]	; (8000f20 <_sbrk+0x68>)
 8000ed8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eda:	4b10      	ldr	r3, [pc, #64]	; (8000f1c <_sbrk+0x64>)
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	d207      	bcs.n	8000ef8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ee8:	f002 f9a4 	bl	8003234 <__errno>
 8000eec:	4603      	mov	r3, r0
 8000eee:	220c      	movs	r2, #12
 8000ef0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef6:	e009      	b.n	8000f0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ef8:	4b08      	ldr	r3, [pc, #32]	; (8000f1c <_sbrk+0x64>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000efe:	4b07      	ldr	r3, [pc, #28]	; (8000f1c <_sbrk+0x64>)
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4413      	add	r3, r2
 8000f06:	4a05      	ldr	r2, [pc, #20]	; (8000f1c <_sbrk+0x64>)
 8000f08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f0a:	68fb      	ldr	r3, [r7, #12]
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3718      	adds	r7, #24
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20018000 	.word	0x20018000
 8000f18:	00000400 	.word	0x00000400
 8000f1c:	20000094 	.word	0x20000094
 8000f20:	20000170 	.word	0x20000170

08000f24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f28:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <SystemInit+0x20>)
 8000f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f2e:	4a05      	ldr	r2, [pc, #20]	; (8000f44 <SystemInit+0x20>)
 8000f30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f80 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f4c:	480d      	ldr	r0, [pc, #52]	; (8000f84 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f4e:	490e      	ldr	r1, [pc, #56]	; (8000f88 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f50:	4a0e      	ldr	r2, [pc, #56]	; (8000f8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f54:	e002      	b.n	8000f5c <LoopCopyDataInit>

08000f56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f5a:	3304      	adds	r3, #4

08000f5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f60:	d3f9      	bcc.n	8000f56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f62:	4a0b      	ldr	r2, [pc, #44]	; (8000f90 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f64:	4c0b      	ldr	r4, [pc, #44]	; (8000f94 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f68:	e001      	b.n	8000f6e <LoopFillZerobss>

08000f6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f6c:	3204      	adds	r2, #4

08000f6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f70:	d3fb      	bcc.n	8000f6a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f72:	f7ff ffd7 	bl	8000f24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f76:	f002 f963 	bl	8003240 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f7a:	f7ff fc47 	bl	800080c <main>
  bx  lr    
 8000f7e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f80:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000f84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f88:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000f8c:	08003bd8 	.word	0x08003bd8
  ldr r2, =_sbss
 8000f90:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000f94:	2000016c 	.word	0x2000016c

08000f98 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f98:	e7fe      	b.n	8000f98 <DMA1_Stream0_IRQHandler>
	...

08000f9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fa0:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <HAL_Init+0x40>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a0d      	ldr	r2, [pc, #52]	; (8000fdc <HAL_Init+0x40>)
 8000fa6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000faa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fac:	4b0b      	ldr	r3, [pc, #44]	; (8000fdc <HAL_Init+0x40>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a0a      	ldr	r2, [pc, #40]	; (8000fdc <HAL_Init+0x40>)
 8000fb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fb8:	4b08      	ldr	r3, [pc, #32]	; (8000fdc <HAL_Init+0x40>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a07      	ldr	r2, [pc, #28]	; (8000fdc <HAL_Init+0x40>)
 8000fbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc4:	2003      	movs	r0, #3
 8000fc6:	f000 fe99 	bl	8001cfc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fca:	200f      	movs	r0, #15
 8000fcc:	f000 f808 	bl	8000fe0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fd0:	f7ff fe7a 	bl	8000cc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40023c00 	.word	0x40023c00

08000fe0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fe8:	4b12      	ldr	r3, [pc, #72]	; (8001034 <HAL_InitTick+0x54>)
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	4b12      	ldr	r3, [pc, #72]	; (8001038 <HAL_InitTick+0x58>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ff6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ffe:	4618      	mov	r0, r3
 8001000:	f000 feb1 	bl	8001d66 <HAL_SYSTICK_Config>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e00e      	b.n	800102c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2b0f      	cmp	r3, #15
 8001012:	d80a      	bhi.n	800102a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001014:	2200      	movs	r2, #0
 8001016:	6879      	ldr	r1, [r7, #4]
 8001018:	f04f 30ff 	mov.w	r0, #4294967295
 800101c:	f000 fe79 	bl	8001d12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001020:	4a06      	ldr	r2, [pc, #24]	; (800103c <HAL_InitTick+0x5c>)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001026:	2300      	movs	r3, #0
 8001028:	e000      	b.n	800102c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
}
 800102c:	4618      	mov	r0, r3
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20000000 	.word	0x20000000
 8001038:	20000008 	.word	0x20000008
 800103c:	20000004 	.word	0x20000004

08001040 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001044:	4b06      	ldr	r3, [pc, #24]	; (8001060 <HAL_IncTick+0x20>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	461a      	mov	r2, r3
 800104a:	4b06      	ldr	r3, [pc, #24]	; (8001064 <HAL_IncTick+0x24>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4413      	add	r3, r2
 8001050:	4a04      	ldr	r2, [pc, #16]	; (8001064 <HAL_IncTick+0x24>)
 8001052:	6013      	str	r3, [r2, #0]
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	20000008 	.word	0x20000008
 8001064:	20000158 	.word	0x20000158

08001068 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  return uwTick;
 800106c:	4b03      	ldr	r3, [pc, #12]	; (800107c <HAL_GetTick+0x14>)
 800106e:	681b      	ldr	r3, [r3, #0]
}
 8001070:	4618      	mov	r0, r3
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	20000158 	.word	0x20000158

08001080 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001088:	f7ff ffee 	bl	8001068 <HAL_GetTick>
 800108c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001098:	d005      	beq.n	80010a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800109a:	4b0a      	ldr	r3, [pc, #40]	; (80010c4 <HAL_Delay+0x44>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	461a      	mov	r2, r3
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	4413      	add	r3, r2
 80010a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010a6:	bf00      	nop
 80010a8:	f7ff ffde 	bl	8001068 <HAL_GetTick>
 80010ac:	4602      	mov	r2, r0
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	68fa      	ldr	r2, [r7, #12]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d8f7      	bhi.n	80010a8 <HAL_Delay+0x28>
  {
  }
}
 80010b8:	bf00      	nop
 80010ba:	bf00      	nop
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20000008 	.word	0x20000008

080010c8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010d0:	2300      	movs	r3, #0
 80010d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d101      	bne.n	80010de <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e033      	b.n	8001146 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d109      	bne.n	80010fa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f7ff fe16 	bl	8000d18 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2200      	movs	r2, #0
 80010f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2200      	movs	r2, #0
 80010f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fe:	f003 0310 	and.w	r3, r3, #16
 8001102:	2b00      	cmp	r3, #0
 8001104:	d118      	bne.n	8001138 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800110e:	f023 0302 	bic.w	r3, r3, #2
 8001112:	f043 0202 	orr.w	r2, r3, #2
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f000 fc18 	bl	8001950 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2200      	movs	r2, #0
 8001124:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112a:	f023 0303 	bic.w	r3, r3, #3
 800112e:	f043 0201 	orr.w	r2, r3, #1
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	641a      	str	r2, [r3, #64]	; 0x40
 8001136:	e001      	b.n	800113c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001138:	2301      	movs	r3, #1
 800113a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2200      	movs	r2, #0
 8001140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001144:	7bfb      	ldrb	r3, [r7, #15]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3710      	adds	r7, #16
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
	...

08001150 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001150:	b480      	push	{r7}
 8001152:	b085      	sub	sp, #20
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001158:	2300      	movs	r3, #0
 800115a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001162:	2b01      	cmp	r3, #1
 8001164:	d101      	bne.n	800116a <HAL_ADC_Start+0x1a>
 8001166:	2302      	movs	r3, #2
 8001168:	e097      	b.n	800129a <HAL_ADC_Start+0x14a>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2201      	movs	r2, #1
 800116e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	f003 0301 	and.w	r3, r3, #1
 800117c:	2b01      	cmp	r3, #1
 800117e:	d018      	beq.n	80011b2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	689a      	ldr	r2, [r3, #8]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f042 0201 	orr.w	r2, r2, #1
 800118e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001190:	4b45      	ldr	r3, [pc, #276]	; (80012a8 <HAL_ADC_Start+0x158>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a45      	ldr	r2, [pc, #276]	; (80012ac <HAL_ADC_Start+0x15c>)
 8001196:	fba2 2303 	umull	r2, r3, r2, r3
 800119a:	0c9a      	lsrs	r2, r3, #18
 800119c:	4613      	mov	r3, r2
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	4413      	add	r3, r2
 80011a2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80011a4:	e002      	b.n	80011ac <HAL_ADC_Start+0x5c>
    {
      counter--;
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	3b01      	subs	r3, #1
 80011aa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d1f9      	bne.n	80011a6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	f003 0301 	and.w	r3, r3, #1
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d15f      	bne.n	8001280 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80011c8:	f023 0301 	bic.w	r3, r3, #1
 80011cc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d007      	beq.n	80011f2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80011ea:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011fe:	d106      	bne.n	800120e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001204:	f023 0206 	bic.w	r2, r3, #6
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	645a      	str	r2, [r3, #68]	; 0x44
 800120c:	e002      	b.n	8001214 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2200      	movs	r2, #0
 8001212:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2200      	movs	r2, #0
 8001218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800121c:	4b24      	ldr	r3, [pc, #144]	; (80012b0 <HAL_ADC_Start+0x160>)
 800121e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001228:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f003 031f 	and.w	r3, r3, #31
 8001232:	2b00      	cmp	r3, #0
 8001234:	d10f      	bne.n	8001256 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d129      	bne.n	8001298 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	689a      	ldr	r2, [r3, #8]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	e020      	b.n	8001298 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a16      	ldr	r2, [pc, #88]	; (80012b4 <HAL_ADC_Start+0x164>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d11b      	bne.n	8001298 <HAL_ADC_Start+0x148>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d114      	bne.n	8001298 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	689a      	ldr	r2, [r3, #8]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800127c:	609a      	str	r2, [r3, #8]
 800127e:	e00b      	b.n	8001298 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001284:	f043 0210 	orr.w	r2, r3, #16
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001290:	f043 0201 	orr.w	r2, r3, #1
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001298:	2300      	movs	r3, #0
}
 800129a:	4618      	mov	r0, r3
 800129c:	3714      	adds	r7, #20
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	20000000 	.word	0x20000000
 80012ac:	431bde83 	.word	0x431bde83
 80012b0:	40012300 	.word	0x40012300
 80012b4:	40012000 	.word	0x40012000

080012b8 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d101      	bne.n	80012ce <HAL_ADC_Stop+0x16>
 80012ca:	2302      	movs	r3, #2
 80012cc:	e021      	b.n	8001312 <HAL_ADC_Stop+0x5a>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2201      	movs	r2, #1
 80012d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	689a      	ldr	r2, [r3, #8]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f022 0201 	bic.w	r2, r2, #1
 80012e4:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	f003 0301 	and.w	r3, r3, #1
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d109      	bne.n	8001308 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80012fc:	f023 0301 	bic.w	r3, r3, #1
 8001300:	f043 0201 	orr.w	r2, r3, #1
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2200      	movs	r2, #0
 800130c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr

0800131e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	b084      	sub	sp, #16
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
 8001326:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001328:	2300      	movs	r3, #0
 800132a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001336:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800133a:	d113      	bne.n	8001364 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001346:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800134a:	d10b      	bne.n	8001364 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001350:	f043 0220 	orr.w	r2, r3, #32
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2200      	movs	r2, #0
 800135c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	e063      	b.n	800142c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001364:	f7ff fe80 	bl	8001068 <HAL_GetTick>
 8001368:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800136a:	e021      	b.n	80013b0 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001372:	d01d      	beq.n	80013b0 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d007      	beq.n	800138a <HAL_ADC_PollForConversion+0x6c>
 800137a:	f7ff fe75 	bl	8001068 <HAL_GetTick>
 800137e:	4602      	mov	r2, r0
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	683a      	ldr	r2, [r7, #0]
 8001386:	429a      	cmp	r2, r3
 8001388:	d212      	bcs.n	80013b0 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f003 0302 	and.w	r3, r3, #2
 8001394:	2b02      	cmp	r3, #2
 8001396:	d00b      	beq.n	80013b0 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139c:	f043 0204 	orr.w	r2, r3, #4
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2200      	movs	r2, #0
 80013a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80013ac:	2303      	movs	r3, #3
 80013ae:	e03d      	b.n	800142c <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0302 	and.w	r3, r3, #2
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d1d6      	bne.n	800136c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f06f 0212 	mvn.w	r2, #18
 80013c6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013cc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d123      	bne.n	800142a <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d11f      	bne.n	800142a <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013f0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d006      	beq.n	8001406 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001402:	2b00      	cmp	r3, #0
 8001404:	d111      	bne.n	800142a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d105      	bne.n	800142a <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001422:	f043 0201 	orr.w	r2, r3, #1
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800142a:	2300      	movs	r3, #0
}
 800142c:	4618      	mov	r0, r3
 800142e:	3710      	adds	r7, #16
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}

08001434 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800143c:	2300      	movs	r3, #0
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	2300      	movs	r3, #0
 8001442:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	2b02      	cmp	r3, #2
 8001450:	bf0c      	ite	eq
 8001452:	2301      	moveq	r3, #1
 8001454:	2300      	movne	r3, #0
 8001456:	b2db      	uxtb	r3, r3
 8001458:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f003 0320 	and.w	r3, r3, #32
 8001464:	2b20      	cmp	r3, #32
 8001466:	bf0c      	ite	eq
 8001468:	2301      	moveq	r3, #1
 800146a:	2300      	movne	r3, #0
 800146c:	b2db      	uxtb	r3, r3
 800146e:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d049      	beq.n	800150a <HAL_ADC_IRQHandler+0xd6>
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d046      	beq.n	800150a <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001480:	f003 0310 	and.w	r3, r3, #16
 8001484:	2b00      	cmp	r3, #0
 8001486:	d105      	bne.n	8001494 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d12b      	bne.n	80014fa <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d127      	bne.n	80014fa <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d006      	beq.n	80014c6 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d119      	bne.n	80014fa <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	685a      	ldr	r2, [r3, #4]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f022 0220 	bic.w	r2, r2, #32
 80014d4:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d105      	bne.n	80014fa <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f2:	f043 0201 	orr.w	r2, r3, #1
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f000 f8e8 	bl	80016d0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f06f 0212 	mvn.w	r2, #18
 8001508:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 0304 	and.w	r3, r3, #4
 8001514:	2b04      	cmp	r3, #4
 8001516:	bf0c      	ite	eq
 8001518:	2301      	moveq	r3, #1
 800151a:	2300      	movne	r3, #0
 800151c:	b2db      	uxtb	r3, r3
 800151e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800152a:	2b80      	cmp	r3, #128	; 0x80
 800152c:	bf0c      	ite	eq
 800152e:	2301      	moveq	r3, #1
 8001530:	2300      	movne	r3, #0
 8001532:	b2db      	uxtb	r3, r3
 8001534:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d057      	beq.n	80015ec <HAL_ADC_IRQHandler+0x1b8>
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d054      	beq.n	80015ec <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001546:	f003 0310 	and.w	r3, r3, #16
 800154a:	2b00      	cmp	r3, #0
 800154c:	d105      	bne.n	800155a <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d139      	bne.n	80015dc <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800156e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001572:	2b00      	cmp	r3, #0
 8001574:	d006      	beq.n	8001584 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001580:	2b00      	cmp	r3, #0
 8001582:	d12b      	bne.n	80015dc <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800158e:	2b00      	cmp	r3, #0
 8001590:	d124      	bne.n	80015dc <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800159c:	2b00      	cmp	r3, #0
 800159e:	d11d      	bne.n	80015dc <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d119      	bne.n	80015dc <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	685a      	ldr	r2, [r3, #4]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015b6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015bc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d105      	bne.n	80015dc <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d4:	f043 0201 	orr.w	r2, r3, #1
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f000 fab3 	bl	8001b48 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f06f 020c 	mvn.w	r2, #12
 80015ea:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	bf0c      	ite	eq
 80015fa:	2301      	moveq	r3, #1
 80015fc:	2300      	movne	r3, #0
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800160c:	2b40      	cmp	r3, #64	; 0x40
 800160e:	bf0c      	ite	eq
 8001610:	2301      	moveq	r3, #1
 8001612:	2300      	movne	r3, #0
 8001614:	b2db      	uxtb	r3, r3
 8001616:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d017      	beq.n	800164e <HAL_ADC_IRQHandler+0x21a>
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d014      	beq.n	800164e <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	2b01      	cmp	r3, #1
 8001630:	d10d      	bne.n	800164e <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001636:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f000 f850 	bl	80016e4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f06f 0201 	mvn.w	r2, #1
 800164c:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0320 	and.w	r3, r3, #32
 8001658:	2b20      	cmp	r3, #32
 800165a:	bf0c      	ite	eq
 800165c:	2301      	moveq	r3, #1
 800165e:	2300      	movne	r3, #0
 8001660:	b2db      	uxtb	r3, r3
 8001662:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800166e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001672:	bf0c      	ite	eq
 8001674:	2301      	moveq	r3, #1
 8001676:	2300      	movne	r3, #0
 8001678:	b2db      	uxtb	r3, r3
 800167a:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d015      	beq.n	80016ae <HAL_ADC_IRQHandler+0x27a>
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d012      	beq.n	80016ae <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168c:	f043 0202 	orr.w	r2, r3, #2
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f06f 0220 	mvn.w	r2, #32
 800169c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f000 f82a 	bl	80016f8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f06f 0220 	mvn.w	r2, #32
 80016ac:	601a      	str	r2, [r3, #0]
  }
}
 80016ae:	bf00      	nop
 80016b0:	3710      	adds	r7, #16
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80016b6:	b480      	push	{r7}
 80016b8:	b083      	sub	sp, #12
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80016d8:	bf00      	nop
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80016ec:	bf00      	nop
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800170c:	b480      	push	{r7}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001716:	2300      	movs	r3, #0
 8001718:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001720:	2b01      	cmp	r3, #1
 8001722:	d101      	bne.n	8001728 <HAL_ADC_ConfigChannel+0x1c>
 8001724:	2302      	movs	r3, #2
 8001726:	e105      	b.n	8001934 <HAL_ADC_ConfigChannel+0x228>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2201      	movs	r2, #1
 800172c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2b09      	cmp	r3, #9
 8001736:	d925      	bls.n	8001784 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	68d9      	ldr	r1, [r3, #12]
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	b29b      	uxth	r3, r3
 8001744:	461a      	mov	r2, r3
 8001746:	4613      	mov	r3, r2
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	4413      	add	r3, r2
 800174c:	3b1e      	subs	r3, #30
 800174e:	2207      	movs	r2, #7
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	43da      	mvns	r2, r3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	400a      	ands	r2, r1
 800175c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	68d9      	ldr	r1, [r3, #12]
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	689a      	ldr	r2, [r3, #8]
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	b29b      	uxth	r3, r3
 800176e:	4618      	mov	r0, r3
 8001770:	4603      	mov	r3, r0
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	4403      	add	r3, r0
 8001776:	3b1e      	subs	r3, #30
 8001778:	409a      	lsls	r2, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	430a      	orrs	r2, r1
 8001780:	60da      	str	r2, [r3, #12]
 8001782:	e022      	b.n	80017ca <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	6919      	ldr	r1, [r3, #16]
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	b29b      	uxth	r3, r3
 8001790:	461a      	mov	r2, r3
 8001792:	4613      	mov	r3, r2
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	4413      	add	r3, r2
 8001798:	2207      	movs	r2, #7
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	43da      	mvns	r2, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	400a      	ands	r2, r1
 80017a6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	6919      	ldr	r1, [r3, #16]
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	689a      	ldr	r2, [r3, #8]
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	4618      	mov	r0, r3
 80017ba:	4603      	mov	r3, r0
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	4403      	add	r3, r0
 80017c0:	409a      	lsls	r2, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	430a      	orrs	r2, r1
 80017c8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	2b06      	cmp	r3, #6
 80017d0:	d824      	bhi.n	800181c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685a      	ldr	r2, [r3, #4]
 80017dc:	4613      	mov	r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4413      	add	r3, r2
 80017e2:	3b05      	subs	r3, #5
 80017e4:	221f      	movs	r2, #31
 80017e6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ea:	43da      	mvns	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	400a      	ands	r2, r1
 80017f2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	b29b      	uxth	r3, r3
 8001800:	4618      	mov	r0, r3
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685a      	ldr	r2, [r3, #4]
 8001806:	4613      	mov	r3, r2
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	4413      	add	r3, r2
 800180c:	3b05      	subs	r3, #5
 800180e:	fa00 f203 	lsl.w	r2, r0, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	430a      	orrs	r2, r1
 8001818:	635a      	str	r2, [r3, #52]	; 0x34
 800181a:	e04c      	b.n	80018b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	2b0c      	cmp	r3, #12
 8001822:	d824      	bhi.n	800186e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685a      	ldr	r2, [r3, #4]
 800182e:	4613      	mov	r3, r2
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	4413      	add	r3, r2
 8001834:	3b23      	subs	r3, #35	; 0x23
 8001836:	221f      	movs	r2, #31
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	43da      	mvns	r2, r3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	400a      	ands	r2, r1
 8001844:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	b29b      	uxth	r3, r3
 8001852:	4618      	mov	r0, r3
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685a      	ldr	r2, [r3, #4]
 8001858:	4613      	mov	r3, r2
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	4413      	add	r3, r2
 800185e:	3b23      	subs	r3, #35	; 0x23
 8001860:	fa00 f203 	lsl.w	r2, r0, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	430a      	orrs	r2, r1
 800186a:	631a      	str	r2, [r3, #48]	; 0x30
 800186c:	e023      	b.n	80018b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685a      	ldr	r2, [r3, #4]
 8001878:	4613      	mov	r3, r2
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	4413      	add	r3, r2
 800187e:	3b41      	subs	r3, #65	; 0x41
 8001880:	221f      	movs	r2, #31
 8001882:	fa02 f303 	lsl.w	r3, r2, r3
 8001886:	43da      	mvns	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	400a      	ands	r2, r1
 800188e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	b29b      	uxth	r3, r3
 800189c:	4618      	mov	r0, r3
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685a      	ldr	r2, [r3, #4]
 80018a2:	4613      	mov	r3, r2
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	4413      	add	r3, r2
 80018a8:	3b41      	subs	r3, #65	; 0x41
 80018aa:	fa00 f203 	lsl.w	r2, r0, r3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	430a      	orrs	r2, r1
 80018b4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018b6:	4b22      	ldr	r3, [pc, #136]	; (8001940 <HAL_ADC_ConfigChannel+0x234>)
 80018b8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a21      	ldr	r2, [pc, #132]	; (8001944 <HAL_ADC_ConfigChannel+0x238>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d109      	bne.n	80018d8 <HAL_ADC_ConfigChannel+0x1cc>
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2b12      	cmp	r3, #18
 80018ca:	d105      	bne.n	80018d8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a19      	ldr	r2, [pc, #100]	; (8001944 <HAL_ADC_ConfigChannel+0x238>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d123      	bne.n	800192a <HAL_ADC_ConfigChannel+0x21e>
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	2b10      	cmp	r3, #16
 80018e8:	d003      	beq.n	80018f2 <HAL_ADC_ConfigChannel+0x1e6>
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2b11      	cmp	r3, #17
 80018f0:	d11b      	bne.n	800192a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2b10      	cmp	r3, #16
 8001904:	d111      	bne.n	800192a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001906:	4b10      	ldr	r3, [pc, #64]	; (8001948 <HAL_ADC_ConfigChannel+0x23c>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a10      	ldr	r2, [pc, #64]	; (800194c <HAL_ADC_ConfigChannel+0x240>)
 800190c:	fba2 2303 	umull	r2, r3, r2, r3
 8001910:	0c9a      	lsrs	r2, r3, #18
 8001912:	4613      	mov	r3, r2
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	4413      	add	r3, r2
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800191c:	e002      	b.n	8001924 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	3b01      	subs	r3, #1
 8001922:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d1f9      	bne.n	800191e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2200      	movs	r2, #0
 800192e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001932:	2300      	movs	r3, #0
}
 8001934:	4618      	mov	r0, r3
 8001936:	3714      	adds	r7, #20
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	40012300 	.word	0x40012300
 8001944:	40012000 	.word	0x40012000
 8001948:	20000000 	.word	0x20000000
 800194c:	431bde83 	.word	0x431bde83

08001950 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001950:	b480      	push	{r7}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001958:	4b79      	ldr	r3, [pc, #484]	; (8001b40 <ADC_Init+0x1f0>)
 800195a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	685a      	ldr	r2, [r3, #4]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	431a      	orrs	r2, r3
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	685a      	ldr	r2, [r3, #4]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001984:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	6859      	ldr	r1, [r3, #4]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	691b      	ldr	r3, [r3, #16]
 8001990:	021a      	lsls	r2, r3, #8
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	430a      	orrs	r2, r1
 8001998:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	685a      	ldr	r2, [r3, #4]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80019a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	6859      	ldr	r1, [r3, #4]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	689a      	ldr	r2, [r3, #8]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	430a      	orrs	r2, r1
 80019ba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	689a      	ldr	r2, [r3, #8]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	6899      	ldr	r1, [r3, #8]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	68da      	ldr	r2, [r3, #12]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	430a      	orrs	r2, r1
 80019dc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e2:	4a58      	ldr	r2, [pc, #352]	; (8001b44 <ADC_Init+0x1f4>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d022      	beq.n	8001a2e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	689a      	ldr	r2, [r3, #8]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019f6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	6899      	ldr	r1, [r3, #8]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	430a      	orrs	r2, r1
 8001a08:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	689a      	ldr	r2, [r3, #8]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	6899      	ldr	r1, [r3, #8]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	430a      	orrs	r2, r1
 8001a2a:	609a      	str	r2, [r3, #8]
 8001a2c:	e00f      	b.n	8001a4e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	689a      	ldr	r2, [r3, #8]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	689a      	ldr	r2, [r3, #8]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a4c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	689a      	ldr	r2, [r3, #8]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f022 0202 	bic.w	r2, r2, #2
 8001a5c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	6899      	ldr	r1, [r3, #8]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	7e1b      	ldrb	r3, [r3, #24]
 8001a68:	005a      	lsls	r2, r3, #1
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	430a      	orrs	r2, r1
 8001a70:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d01b      	beq.n	8001ab4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	685a      	ldr	r2, [r3, #4]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a8a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	685a      	ldr	r2, [r3, #4]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001a9a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	6859      	ldr	r1, [r3, #4]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	035a      	lsls	r2, r3, #13
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	430a      	orrs	r2, r1
 8001ab0:	605a      	str	r2, [r3, #4]
 8001ab2:	e007      	b.n	8001ac4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	685a      	ldr	r2, [r3, #4]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ac2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001ad2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	69db      	ldr	r3, [r3, #28]
 8001ade:	3b01      	subs	r3, #1
 8001ae0:	051a      	lsls	r2, r3, #20
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	430a      	orrs	r2, r1
 8001ae8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	689a      	ldr	r2, [r3, #8]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001af8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	6899      	ldr	r1, [r3, #8]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b06:	025a      	lsls	r2, r3, #9
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	430a      	orrs	r2, r1
 8001b0e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	689a      	ldr	r2, [r3, #8]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b1e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	6899      	ldr	r1, [r3, #8]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	695b      	ldr	r3, [r3, #20]
 8001b2a:	029a      	lsls	r2, r3, #10
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	430a      	orrs	r2, r1
 8001b32:	609a      	str	r2, [r3, #8]
}
 8001b34:	bf00      	nop
 8001b36:	3714      	adds	r7, #20
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr
 8001b40:	40012300 	.word	0x40012300
 8001b44:	0f000001 	.word	0x0f000001

08001b48 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001b50:	bf00      	nop
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f003 0307 	and.w	r3, r3, #7
 8001b6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b72:	68ba      	ldr	r2, [r7, #8]
 8001b74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b78:	4013      	ands	r3, r2
 8001b7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b8e:	4a04      	ldr	r2, [pc, #16]	; (8001ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	60d3      	str	r3, [r2, #12]
}
 8001b94:	bf00      	nop
 8001b96:	3714      	adds	r7, #20
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr
 8001ba0:	e000ed00 	.word	0xe000ed00

08001ba4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ba8:	4b04      	ldr	r3, [pc, #16]	; (8001bbc <__NVIC_GetPriorityGrouping+0x18>)
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	0a1b      	lsrs	r3, r3, #8
 8001bae:	f003 0307 	and.w	r3, r3, #7
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr
 8001bbc:	e000ed00 	.word	0xe000ed00

08001bc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	db0b      	blt.n	8001bea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bd2:	79fb      	ldrb	r3, [r7, #7]
 8001bd4:	f003 021f 	and.w	r2, r3, #31
 8001bd8:	4907      	ldr	r1, [pc, #28]	; (8001bf8 <__NVIC_EnableIRQ+0x38>)
 8001bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bde:	095b      	lsrs	r3, r3, #5
 8001be0:	2001      	movs	r0, #1
 8001be2:	fa00 f202 	lsl.w	r2, r0, r2
 8001be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bea:	bf00      	nop
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	e000e100 	.word	0xe000e100

08001bfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	4603      	mov	r3, r0
 8001c04:	6039      	str	r1, [r7, #0]
 8001c06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	db0a      	blt.n	8001c26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	b2da      	uxtb	r2, r3
 8001c14:	490c      	ldr	r1, [pc, #48]	; (8001c48 <__NVIC_SetPriority+0x4c>)
 8001c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1a:	0112      	lsls	r2, r2, #4
 8001c1c:	b2d2      	uxtb	r2, r2
 8001c1e:	440b      	add	r3, r1
 8001c20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c24:	e00a      	b.n	8001c3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	b2da      	uxtb	r2, r3
 8001c2a:	4908      	ldr	r1, [pc, #32]	; (8001c4c <__NVIC_SetPriority+0x50>)
 8001c2c:	79fb      	ldrb	r3, [r7, #7]
 8001c2e:	f003 030f 	and.w	r3, r3, #15
 8001c32:	3b04      	subs	r3, #4
 8001c34:	0112      	lsls	r2, r2, #4
 8001c36:	b2d2      	uxtb	r2, r2
 8001c38:	440b      	add	r3, r1
 8001c3a:	761a      	strb	r2, [r3, #24]
}
 8001c3c:	bf00      	nop
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	e000e100 	.word	0xe000e100
 8001c4c:	e000ed00 	.word	0xe000ed00

08001c50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b089      	sub	sp, #36	; 0x24
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	60b9      	str	r1, [r7, #8]
 8001c5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	f003 0307 	and.w	r3, r3, #7
 8001c62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	f1c3 0307 	rsb	r3, r3, #7
 8001c6a:	2b04      	cmp	r3, #4
 8001c6c:	bf28      	it	cs
 8001c6e:	2304      	movcs	r3, #4
 8001c70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	3304      	adds	r3, #4
 8001c76:	2b06      	cmp	r3, #6
 8001c78:	d902      	bls.n	8001c80 <NVIC_EncodePriority+0x30>
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	3b03      	subs	r3, #3
 8001c7e:	e000      	b.n	8001c82 <NVIC_EncodePriority+0x32>
 8001c80:	2300      	movs	r3, #0
 8001c82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c84:	f04f 32ff 	mov.w	r2, #4294967295
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8e:	43da      	mvns	r2, r3
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	401a      	ands	r2, r3
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c98:	f04f 31ff 	mov.w	r1, #4294967295
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca2:	43d9      	mvns	r1, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca8:	4313      	orrs	r3, r2
         );
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3724      	adds	r7, #36	; 0x24
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
	...

08001cb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	3b01      	subs	r3, #1
 8001cc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cc8:	d301      	bcc.n	8001cce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e00f      	b.n	8001cee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cce:	4a0a      	ldr	r2, [pc, #40]	; (8001cf8 <SysTick_Config+0x40>)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cd6:	210f      	movs	r1, #15
 8001cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cdc:	f7ff ff8e 	bl	8001bfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ce0:	4b05      	ldr	r3, [pc, #20]	; (8001cf8 <SysTick_Config+0x40>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ce6:	4b04      	ldr	r3, [pc, #16]	; (8001cf8 <SysTick_Config+0x40>)
 8001ce8:	2207      	movs	r2, #7
 8001cea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	e000e010 	.word	0xe000e010

08001cfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f7ff ff29 	bl	8001b5c <__NVIC_SetPriorityGrouping>
}
 8001d0a:	bf00      	nop
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b086      	sub	sp, #24
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	4603      	mov	r3, r0
 8001d1a:	60b9      	str	r1, [r7, #8]
 8001d1c:	607a      	str	r2, [r7, #4]
 8001d1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d20:	2300      	movs	r3, #0
 8001d22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d24:	f7ff ff3e 	bl	8001ba4 <__NVIC_GetPriorityGrouping>
 8001d28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	68b9      	ldr	r1, [r7, #8]
 8001d2e:	6978      	ldr	r0, [r7, #20]
 8001d30:	f7ff ff8e 	bl	8001c50 <NVIC_EncodePriority>
 8001d34:	4602      	mov	r2, r0
 8001d36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d3a:	4611      	mov	r1, r2
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7ff ff5d 	bl	8001bfc <__NVIC_SetPriority>
}
 8001d42:	bf00      	nop
 8001d44:	3718      	adds	r7, #24
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b082      	sub	sp, #8
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	4603      	mov	r3, r0
 8001d52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff ff31 	bl	8001bc0 <__NVIC_EnableIRQ>
}
 8001d5e:	bf00      	nop
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b082      	sub	sp, #8
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f7ff ffa2 	bl	8001cb8 <SysTick_Config>
 8001d74:	4603      	mov	r3, r0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
	...

08001d80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b089      	sub	sp, #36	; 0x24
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d92:	2300      	movs	r3, #0
 8001d94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d96:	2300      	movs	r3, #0
 8001d98:	61fb      	str	r3, [r7, #28]
 8001d9a:	e159      	b.n	8002050 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	697a      	ldr	r2, [r7, #20]
 8001dac:	4013      	ands	r3, r2
 8001dae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001db0:	693a      	ldr	r2, [r7, #16]
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	f040 8148 	bne.w	800204a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f003 0303 	and.w	r3, r3, #3
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d005      	beq.n	8001dd2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d130      	bne.n	8001e34 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	2203      	movs	r2, #3
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	43db      	mvns	r3, r3
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	4013      	ands	r3, r2
 8001de8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	68da      	ldr	r2, [r3, #12]
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	fa02 f303 	lsl.w	r3, r2, r3
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e08:	2201      	movs	r2, #1
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	43db      	mvns	r3, r3
 8001e12:	69ba      	ldr	r2, [r7, #24]
 8001e14:	4013      	ands	r3, r2
 8001e16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	091b      	lsrs	r3, r3, #4
 8001e1e:	f003 0201 	and.w	r2, r3, #1
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	fa02 f303 	lsl.w	r3, r2, r3
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f003 0303 	and.w	r3, r3, #3
 8001e3c:	2b03      	cmp	r3, #3
 8001e3e:	d017      	beq.n	8001e70 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	2203      	movs	r2, #3
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	43db      	mvns	r3, r3
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	4013      	ands	r3, r2
 8001e56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	689a      	ldr	r2, [r3, #8]
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f003 0303 	and.w	r3, r3, #3
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d123      	bne.n	8001ec4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	08da      	lsrs	r2, r3, #3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	3208      	adds	r2, #8
 8001e84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	f003 0307 	and.w	r3, r3, #7
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	220f      	movs	r2, #15
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	691a      	ldr	r2, [r3, #16]
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	f003 0307 	and.w	r3, r3, #7
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	08da      	lsrs	r2, r3, #3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	3208      	adds	r2, #8
 8001ebe:	69b9      	ldr	r1, [r7, #24]
 8001ec0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	2203      	movs	r2, #3
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f003 0203 	and.w	r2, r3, #3
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	f000 80a2 	beq.w	800204a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f06:	2300      	movs	r3, #0
 8001f08:	60fb      	str	r3, [r7, #12]
 8001f0a:	4b57      	ldr	r3, [pc, #348]	; (8002068 <HAL_GPIO_Init+0x2e8>)
 8001f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0e:	4a56      	ldr	r2, [pc, #344]	; (8002068 <HAL_GPIO_Init+0x2e8>)
 8001f10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f14:	6453      	str	r3, [r2, #68]	; 0x44
 8001f16:	4b54      	ldr	r3, [pc, #336]	; (8002068 <HAL_GPIO_Init+0x2e8>)
 8001f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f1e:	60fb      	str	r3, [r7, #12]
 8001f20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f22:	4a52      	ldr	r2, [pc, #328]	; (800206c <HAL_GPIO_Init+0x2ec>)
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	089b      	lsrs	r3, r3, #2
 8001f28:	3302      	adds	r3, #2
 8001f2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	f003 0303 	and.w	r3, r3, #3
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	220f      	movs	r2, #15
 8001f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3e:	43db      	mvns	r3, r3
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	4013      	ands	r3, r2
 8001f44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a49      	ldr	r2, [pc, #292]	; (8002070 <HAL_GPIO_Init+0x2f0>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d019      	beq.n	8001f82 <HAL_GPIO_Init+0x202>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a48      	ldr	r2, [pc, #288]	; (8002074 <HAL_GPIO_Init+0x2f4>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d013      	beq.n	8001f7e <HAL_GPIO_Init+0x1fe>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a47      	ldr	r2, [pc, #284]	; (8002078 <HAL_GPIO_Init+0x2f8>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d00d      	beq.n	8001f7a <HAL_GPIO_Init+0x1fa>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a46      	ldr	r2, [pc, #280]	; (800207c <HAL_GPIO_Init+0x2fc>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d007      	beq.n	8001f76 <HAL_GPIO_Init+0x1f6>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a45      	ldr	r2, [pc, #276]	; (8002080 <HAL_GPIO_Init+0x300>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d101      	bne.n	8001f72 <HAL_GPIO_Init+0x1f2>
 8001f6e:	2304      	movs	r3, #4
 8001f70:	e008      	b.n	8001f84 <HAL_GPIO_Init+0x204>
 8001f72:	2307      	movs	r3, #7
 8001f74:	e006      	b.n	8001f84 <HAL_GPIO_Init+0x204>
 8001f76:	2303      	movs	r3, #3
 8001f78:	e004      	b.n	8001f84 <HAL_GPIO_Init+0x204>
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	e002      	b.n	8001f84 <HAL_GPIO_Init+0x204>
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e000      	b.n	8001f84 <HAL_GPIO_Init+0x204>
 8001f82:	2300      	movs	r3, #0
 8001f84:	69fa      	ldr	r2, [r7, #28]
 8001f86:	f002 0203 	and.w	r2, r2, #3
 8001f8a:	0092      	lsls	r2, r2, #2
 8001f8c:	4093      	lsls	r3, r2
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f94:	4935      	ldr	r1, [pc, #212]	; (800206c <HAL_GPIO_Init+0x2ec>)
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	089b      	lsrs	r3, r3, #2
 8001f9a:	3302      	adds	r3, #2
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fa2:	4b38      	ldr	r3, [pc, #224]	; (8002084 <HAL_GPIO_Init+0x304>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	43db      	mvns	r3, r3
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	4013      	ands	r3, r2
 8001fb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d003      	beq.n	8001fc6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001fbe:	69ba      	ldr	r2, [r7, #24]
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fc6:	4a2f      	ldr	r2, [pc, #188]	; (8002084 <HAL_GPIO_Init+0x304>)
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001fcc:	4b2d      	ldr	r3, [pc, #180]	; (8002084 <HAL_GPIO_Init+0x304>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d003      	beq.n	8001ff0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ff0:	4a24      	ldr	r2, [pc, #144]	; (8002084 <HAL_GPIO_Init+0x304>)
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ff6:	4b23      	ldr	r3, [pc, #140]	; (8002084 <HAL_GPIO_Init+0x304>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	43db      	mvns	r3, r3
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	4013      	ands	r3, r2
 8002004:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d003      	beq.n	800201a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	4313      	orrs	r3, r2
 8002018:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800201a:	4a1a      	ldr	r2, [pc, #104]	; (8002084 <HAL_GPIO_Init+0x304>)
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002020:	4b18      	ldr	r3, [pc, #96]	; (8002084 <HAL_GPIO_Init+0x304>)
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	43db      	mvns	r3, r3
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	4013      	ands	r3, r2
 800202e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d003      	beq.n	8002044 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	4313      	orrs	r3, r2
 8002042:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002044:	4a0f      	ldr	r2, [pc, #60]	; (8002084 <HAL_GPIO_Init+0x304>)
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	3301      	adds	r3, #1
 800204e:	61fb      	str	r3, [r7, #28]
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	2b0f      	cmp	r3, #15
 8002054:	f67f aea2 	bls.w	8001d9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002058:	bf00      	nop
 800205a:	bf00      	nop
 800205c:	3724      	adds	r7, #36	; 0x24
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	40023800 	.word	0x40023800
 800206c:	40013800 	.word	0x40013800
 8002070:	40020000 	.word	0x40020000
 8002074:	40020400 	.word	0x40020400
 8002078:	40020800 	.word	0x40020800
 800207c:	40020c00 	.word	0x40020c00
 8002080:	40021000 	.word	0x40021000
 8002084:	40013c00 	.word	0x40013c00

08002088 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002088:	b480      	push	{r7}
 800208a:	b085      	sub	sp, #20
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	460b      	mov	r3, r1
 8002092:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	691a      	ldr	r2, [r3, #16]
 8002098:	887b      	ldrh	r3, [r7, #2]
 800209a:	4013      	ands	r3, r2
 800209c:	2b00      	cmp	r3, #0
 800209e:	d002      	beq.n	80020a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020a0:	2301      	movs	r3, #1
 80020a2:	73fb      	strb	r3, [r7, #15]
 80020a4:	e001      	b.n	80020aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020a6:	2300      	movs	r3, #0
 80020a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3714      	adds	r7, #20
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	460b      	mov	r3, r1
 80020c2:	807b      	strh	r3, [r7, #2]
 80020c4:	4613      	mov	r3, r2
 80020c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020c8:	787b      	ldrb	r3, [r7, #1]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d003      	beq.n	80020d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020ce:	887a      	ldrh	r2, [r7, #2]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020d4:	e003      	b.n	80020de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020d6:	887b      	ldrh	r3, [r7, #2]
 80020d8:	041a      	lsls	r2, r3, #16
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	619a      	str	r2, [r3, #24]
}
 80020de:	bf00      	nop
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
	...

080020ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	4603      	mov	r3, r0
 80020f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80020f6:	4b08      	ldr	r3, [pc, #32]	; (8002118 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020f8:	695a      	ldr	r2, [r3, #20]
 80020fa:	88fb      	ldrh	r3, [r7, #6]
 80020fc:	4013      	ands	r3, r2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d006      	beq.n	8002110 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002102:	4a05      	ldr	r2, [pc, #20]	; (8002118 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002104:	88fb      	ldrh	r3, [r7, #6]
 8002106:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002108:	88fb      	ldrh	r3, [r7, #6]
 800210a:	4618      	mov	r0, r3
 800210c:	f000 f806 	bl	800211c <HAL_GPIO_EXTI_Callback>
  }
}
 8002110:	bf00      	nop
 8002112:	3708      	adds	r7, #8
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	40013c00 	.word	0x40013c00

0800211c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	4603      	mov	r3, r0
 8002124:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002126:	bf00      	nop
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
	...

08002134 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d101      	bne.n	8002146 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e12b      	b.n	800239e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800214c:	b2db      	uxtb	r3, r3
 800214e:	2b00      	cmp	r3, #0
 8002150:	d106      	bne.n	8002160 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f7fe fe28 	bl	8000db0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2224      	movs	r2, #36	; 0x24
 8002164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f022 0201 	bic.w	r2, r2, #1
 8002176:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002186:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002196:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002198:	f001 f838 	bl	800320c <HAL_RCC_GetPCLK1Freq>
 800219c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	4a81      	ldr	r2, [pc, #516]	; (80023a8 <HAL_I2C_Init+0x274>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d807      	bhi.n	80021b8 <HAL_I2C_Init+0x84>
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	4a80      	ldr	r2, [pc, #512]	; (80023ac <HAL_I2C_Init+0x278>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	bf94      	ite	ls
 80021b0:	2301      	movls	r3, #1
 80021b2:	2300      	movhi	r3, #0
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	e006      	b.n	80021c6 <HAL_I2C_Init+0x92>
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	4a7d      	ldr	r2, [pc, #500]	; (80023b0 <HAL_I2C_Init+0x27c>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	bf94      	ite	ls
 80021c0:	2301      	movls	r3, #1
 80021c2:	2300      	movhi	r3, #0
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e0e7      	b.n	800239e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	4a78      	ldr	r2, [pc, #480]	; (80023b4 <HAL_I2C_Init+0x280>)
 80021d2:	fba2 2303 	umull	r2, r3, r2, r3
 80021d6:	0c9b      	lsrs	r3, r3, #18
 80021d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	68ba      	ldr	r2, [r7, #8]
 80021ea:	430a      	orrs	r2, r1
 80021ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	6a1b      	ldr	r3, [r3, #32]
 80021f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	4a6a      	ldr	r2, [pc, #424]	; (80023a8 <HAL_I2C_Init+0x274>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d802      	bhi.n	8002208 <HAL_I2C_Init+0xd4>
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	3301      	adds	r3, #1
 8002206:	e009      	b.n	800221c <HAL_I2C_Init+0xe8>
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800220e:	fb02 f303 	mul.w	r3, r2, r3
 8002212:	4a69      	ldr	r2, [pc, #420]	; (80023b8 <HAL_I2C_Init+0x284>)
 8002214:	fba2 2303 	umull	r2, r3, r2, r3
 8002218:	099b      	lsrs	r3, r3, #6
 800221a:	3301      	adds	r3, #1
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	6812      	ldr	r2, [r2, #0]
 8002220:	430b      	orrs	r3, r1
 8002222:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	69db      	ldr	r3, [r3, #28]
 800222a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800222e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	495c      	ldr	r1, [pc, #368]	; (80023a8 <HAL_I2C_Init+0x274>)
 8002238:	428b      	cmp	r3, r1
 800223a:	d819      	bhi.n	8002270 <HAL_I2C_Init+0x13c>
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	1e59      	subs	r1, r3, #1
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	fbb1 f3f3 	udiv	r3, r1, r3
 800224a:	1c59      	adds	r1, r3, #1
 800224c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002250:	400b      	ands	r3, r1
 8002252:	2b00      	cmp	r3, #0
 8002254:	d00a      	beq.n	800226c <HAL_I2C_Init+0x138>
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	1e59      	subs	r1, r3, #1
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	fbb1 f3f3 	udiv	r3, r1, r3
 8002264:	3301      	adds	r3, #1
 8002266:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800226a:	e051      	b.n	8002310 <HAL_I2C_Init+0x1dc>
 800226c:	2304      	movs	r3, #4
 800226e:	e04f      	b.n	8002310 <HAL_I2C_Init+0x1dc>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d111      	bne.n	800229c <HAL_I2C_Init+0x168>
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	1e58      	subs	r0, r3, #1
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6859      	ldr	r1, [r3, #4]
 8002280:	460b      	mov	r3, r1
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	440b      	add	r3, r1
 8002286:	fbb0 f3f3 	udiv	r3, r0, r3
 800228a:	3301      	adds	r3, #1
 800228c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002290:	2b00      	cmp	r3, #0
 8002292:	bf0c      	ite	eq
 8002294:	2301      	moveq	r3, #1
 8002296:	2300      	movne	r3, #0
 8002298:	b2db      	uxtb	r3, r3
 800229a:	e012      	b.n	80022c2 <HAL_I2C_Init+0x18e>
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	1e58      	subs	r0, r3, #1
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6859      	ldr	r1, [r3, #4]
 80022a4:	460b      	mov	r3, r1
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	440b      	add	r3, r1
 80022aa:	0099      	lsls	r1, r3, #2
 80022ac:	440b      	add	r3, r1
 80022ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80022b2:	3301      	adds	r3, #1
 80022b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	bf0c      	ite	eq
 80022bc:	2301      	moveq	r3, #1
 80022be:	2300      	movne	r3, #0
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <HAL_I2C_Init+0x196>
 80022c6:	2301      	movs	r3, #1
 80022c8:	e022      	b.n	8002310 <HAL_I2C_Init+0x1dc>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d10e      	bne.n	80022f0 <HAL_I2C_Init+0x1bc>
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	1e58      	subs	r0, r3, #1
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6859      	ldr	r1, [r3, #4]
 80022da:	460b      	mov	r3, r1
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	440b      	add	r3, r1
 80022e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80022e4:	3301      	adds	r3, #1
 80022e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022ee:	e00f      	b.n	8002310 <HAL_I2C_Init+0x1dc>
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	1e58      	subs	r0, r3, #1
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6859      	ldr	r1, [r3, #4]
 80022f8:	460b      	mov	r3, r1
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	440b      	add	r3, r1
 80022fe:	0099      	lsls	r1, r3, #2
 8002300:	440b      	add	r3, r1
 8002302:	fbb0 f3f3 	udiv	r3, r0, r3
 8002306:	3301      	adds	r3, #1
 8002308:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800230c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002310:	6879      	ldr	r1, [r7, #4]
 8002312:	6809      	ldr	r1, [r1, #0]
 8002314:	4313      	orrs	r3, r2
 8002316:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	69da      	ldr	r2, [r3, #28]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a1b      	ldr	r3, [r3, #32]
 800232a:	431a      	orrs	r2, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	430a      	orrs	r2, r1
 8002332:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800233e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	6911      	ldr	r1, [r2, #16]
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	68d2      	ldr	r2, [r2, #12]
 800234a:	4311      	orrs	r1, r2
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	6812      	ldr	r2, [r2, #0]
 8002350:	430b      	orrs	r3, r1
 8002352:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	695a      	ldr	r2, [r3, #20]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	431a      	orrs	r2, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	430a      	orrs	r2, r1
 800236e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f042 0201 	orr.w	r2, r2, #1
 800237e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2220      	movs	r2, #32
 800238a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3710      	adds	r7, #16
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	000186a0 	.word	0x000186a0
 80023ac:	001e847f 	.word	0x001e847f
 80023b0:	003d08ff 	.word	0x003d08ff
 80023b4:	431bde83 	.word	0x431bde83
 80023b8:	10624dd3 	.word	0x10624dd3

080023bc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b088      	sub	sp, #32
 80023c0:	af02      	add	r7, sp, #8
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	607a      	str	r2, [r7, #4]
 80023c6:	461a      	mov	r2, r3
 80023c8:	460b      	mov	r3, r1
 80023ca:	817b      	strh	r3, [r7, #10]
 80023cc:	4613      	mov	r3, r2
 80023ce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023d0:	f7fe fe4a 	bl	8001068 <HAL_GetTick>
 80023d4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b20      	cmp	r3, #32
 80023e0:	f040 80e0 	bne.w	80025a4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	9300      	str	r3, [sp, #0]
 80023e8:	2319      	movs	r3, #25
 80023ea:	2201      	movs	r2, #1
 80023ec:	4970      	ldr	r1, [pc, #448]	; (80025b0 <HAL_I2C_Master_Transmit+0x1f4>)
 80023ee:	68f8      	ldr	r0, [r7, #12]
 80023f0:	f000 f964 	bl	80026bc <I2C_WaitOnFlagUntilTimeout>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80023fa:	2302      	movs	r3, #2
 80023fc:	e0d3      	b.n	80025a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002404:	2b01      	cmp	r3, #1
 8002406:	d101      	bne.n	800240c <HAL_I2C_Master_Transmit+0x50>
 8002408:	2302      	movs	r3, #2
 800240a:	e0cc      	b.n	80025a6 <HAL_I2C_Master_Transmit+0x1ea>
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	2b01      	cmp	r3, #1
 8002420:	d007      	beq.n	8002432 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f042 0201 	orr.w	r2, r2, #1
 8002430:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002440:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2221      	movs	r2, #33	; 0x21
 8002446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2210      	movs	r2, #16
 800244e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2200      	movs	r2, #0
 8002456:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	893a      	ldrh	r2, [r7, #8]
 8002462:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002468:	b29a      	uxth	r2, r3
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	4a50      	ldr	r2, [pc, #320]	; (80025b4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002472:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002474:	8979      	ldrh	r1, [r7, #10]
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	6a3a      	ldr	r2, [r7, #32]
 800247a:	68f8      	ldr	r0, [r7, #12]
 800247c:	f000 f89c 	bl	80025b8 <I2C_MasterRequestWrite>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e08d      	b.n	80025a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800248a:	2300      	movs	r3, #0
 800248c:	613b      	str	r3, [r7, #16]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	695b      	ldr	r3, [r3, #20]
 8002494:	613b      	str	r3, [r7, #16]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	699b      	ldr	r3, [r3, #24]
 800249c:	613b      	str	r3, [r7, #16]
 800249e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80024a0:	e066      	b.n	8002570 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024a2:	697a      	ldr	r2, [r7, #20]
 80024a4:	6a39      	ldr	r1, [r7, #32]
 80024a6:	68f8      	ldr	r0, [r7, #12]
 80024a8:	f000 f9de 	bl	8002868 <I2C_WaitOnTXEFlagUntilTimeout>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d00d      	beq.n	80024ce <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b6:	2b04      	cmp	r3, #4
 80024b8:	d107      	bne.n	80024ca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e06b      	b.n	80025a6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d2:	781a      	ldrb	r2, [r3, #0]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024de:	1c5a      	adds	r2, r3, #1
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	3b01      	subs	r3, #1
 80024ec:	b29a      	uxth	r2, r3
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024f6:	3b01      	subs	r3, #1
 80024f8:	b29a      	uxth	r2, r3
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	695b      	ldr	r3, [r3, #20]
 8002504:	f003 0304 	and.w	r3, r3, #4
 8002508:	2b04      	cmp	r3, #4
 800250a:	d11b      	bne.n	8002544 <HAL_I2C_Master_Transmit+0x188>
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002510:	2b00      	cmp	r3, #0
 8002512:	d017      	beq.n	8002544 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002518:	781a      	ldrb	r2, [r3, #0]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002524:	1c5a      	adds	r2, r3, #1
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800252e:	b29b      	uxth	r3, r3
 8002530:	3b01      	subs	r3, #1
 8002532:	b29a      	uxth	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800253c:	3b01      	subs	r3, #1
 800253e:	b29a      	uxth	r2, r3
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002544:	697a      	ldr	r2, [r7, #20]
 8002546:	6a39      	ldr	r1, [r7, #32]
 8002548:	68f8      	ldr	r0, [r7, #12]
 800254a:	f000 f9ce 	bl	80028ea <I2C_WaitOnBTFFlagUntilTimeout>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d00d      	beq.n	8002570 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002558:	2b04      	cmp	r3, #4
 800255a:	d107      	bne.n	800256c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800256a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e01a      	b.n	80025a6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002574:	2b00      	cmp	r3, #0
 8002576:	d194      	bne.n	80024a2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002586:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2220      	movs	r2, #32
 800258c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2200      	movs	r2, #0
 8002594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2200      	movs	r2, #0
 800259c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80025a0:	2300      	movs	r3, #0
 80025a2:	e000      	b.n	80025a6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80025a4:	2302      	movs	r3, #2
  }
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3718      	adds	r7, #24
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	00100002 	.word	0x00100002
 80025b4:	ffff0000 	.word	0xffff0000

080025b8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b088      	sub	sp, #32
 80025bc:	af02      	add	r7, sp, #8
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	607a      	str	r2, [r7, #4]
 80025c2:	603b      	str	r3, [r7, #0]
 80025c4:	460b      	mov	r3, r1
 80025c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025cc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	2b08      	cmp	r3, #8
 80025d2:	d006      	beq.n	80025e2 <I2C_MasterRequestWrite+0x2a>
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d003      	beq.n	80025e2 <I2C_MasterRequestWrite+0x2a>
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80025e0:	d108      	bne.n	80025f4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025f0:	601a      	str	r2, [r3, #0]
 80025f2:	e00b      	b.n	800260c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f8:	2b12      	cmp	r3, #18
 80025fa:	d107      	bne.n	800260c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800260a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	9300      	str	r3, [sp, #0]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002618:	68f8      	ldr	r0, [r7, #12]
 800261a:	f000 f84f 	bl	80026bc <I2C_WaitOnFlagUntilTimeout>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d00d      	beq.n	8002640 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800262e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002632:	d103      	bne.n	800263c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f44f 7200 	mov.w	r2, #512	; 0x200
 800263a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e035      	b.n	80026ac <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	691b      	ldr	r3, [r3, #16]
 8002644:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002648:	d108      	bne.n	800265c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800264a:	897b      	ldrh	r3, [r7, #10]
 800264c:	b2db      	uxtb	r3, r3
 800264e:	461a      	mov	r2, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002658:	611a      	str	r2, [r3, #16]
 800265a:	e01b      	b.n	8002694 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800265c:	897b      	ldrh	r3, [r7, #10]
 800265e:	11db      	asrs	r3, r3, #7
 8002660:	b2db      	uxtb	r3, r3
 8002662:	f003 0306 	and.w	r3, r3, #6
 8002666:	b2db      	uxtb	r3, r3
 8002668:	f063 030f 	orn	r3, r3, #15
 800266c:	b2da      	uxtb	r2, r3
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	490e      	ldr	r1, [pc, #56]	; (80026b4 <I2C_MasterRequestWrite+0xfc>)
 800267a:	68f8      	ldr	r0, [r7, #12]
 800267c:	f000 f875 	bl	800276a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e010      	b.n	80026ac <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800268a:	897b      	ldrh	r3, [r7, #10]
 800268c:	b2da      	uxtb	r2, r3
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	4907      	ldr	r1, [pc, #28]	; (80026b8 <I2C_MasterRequestWrite+0x100>)
 800269a:	68f8      	ldr	r0, [r7, #12]
 800269c:	f000 f865 	bl	800276a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e000      	b.n	80026ac <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80026aa:	2300      	movs	r3, #0
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3718      	adds	r7, #24
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	00010008 	.word	0x00010008
 80026b8:	00010002 	.word	0x00010002

080026bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	60b9      	str	r1, [r7, #8]
 80026c6:	603b      	str	r3, [r7, #0]
 80026c8:	4613      	mov	r3, r2
 80026ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026cc:	e025      	b.n	800271a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026d4:	d021      	beq.n	800271a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026d6:	f7fe fcc7 	bl	8001068 <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	683a      	ldr	r2, [r7, #0]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d302      	bcc.n	80026ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d116      	bne.n	800271a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2200      	movs	r2, #0
 80026f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2220      	movs	r2, #32
 80026f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002706:	f043 0220 	orr.w	r2, r3, #32
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2200      	movs	r2, #0
 8002712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e023      	b.n	8002762 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	0c1b      	lsrs	r3, r3, #16
 800271e:	b2db      	uxtb	r3, r3
 8002720:	2b01      	cmp	r3, #1
 8002722:	d10d      	bne.n	8002740 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	43da      	mvns	r2, r3
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	4013      	ands	r3, r2
 8002730:	b29b      	uxth	r3, r3
 8002732:	2b00      	cmp	r3, #0
 8002734:	bf0c      	ite	eq
 8002736:	2301      	moveq	r3, #1
 8002738:	2300      	movne	r3, #0
 800273a:	b2db      	uxtb	r3, r3
 800273c:	461a      	mov	r2, r3
 800273e:	e00c      	b.n	800275a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	699b      	ldr	r3, [r3, #24]
 8002746:	43da      	mvns	r2, r3
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	4013      	ands	r3, r2
 800274c:	b29b      	uxth	r3, r3
 800274e:	2b00      	cmp	r3, #0
 8002750:	bf0c      	ite	eq
 8002752:	2301      	moveq	r3, #1
 8002754:	2300      	movne	r3, #0
 8002756:	b2db      	uxtb	r3, r3
 8002758:	461a      	mov	r2, r3
 800275a:	79fb      	ldrb	r3, [r7, #7]
 800275c:	429a      	cmp	r2, r3
 800275e:	d0b6      	beq.n	80026ce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800276a:	b580      	push	{r7, lr}
 800276c:	b084      	sub	sp, #16
 800276e:	af00      	add	r7, sp, #0
 8002770:	60f8      	str	r0, [r7, #12]
 8002772:	60b9      	str	r1, [r7, #8]
 8002774:	607a      	str	r2, [r7, #4]
 8002776:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002778:	e051      	b.n	800281e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	695b      	ldr	r3, [r3, #20]
 8002780:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002784:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002788:	d123      	bne.n	80027d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002798:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80027a2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2200      	movs	r2, #0
 80027a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2220      	movs	r2, #32
 80027ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027be:	f043 0204 	orr.w	r2, r3, #4
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e046      	b.n	8002860 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d8:	d021      	beq.n	800281e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027da:	f7fe fc45 	bl	8001068 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d302      	bcc.n	80027f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d116      	bne.n	800281e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2200      	movs	r2, #0
 80027f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2220      	movs	r2, #32
 80027fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280a:	f043 0220 	orr.w	r2, r3, #32
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e020      	b.n	8002860 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	0c1b      	lsrs	r3, r3, #16
 8002822:	b2db      	uxtb	r3, r3
 8002824:	2b01      	cmp	r3, #1
 8002826:	d10c      	bne.n	8002842 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	695b      	ldr	r3, [r3, #20]
 800282e:	43da      	mvns	r2, r3
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	4013      	ands	r3, r2
 8002834:	b29b      	uxth	r3, r3
 8002836:	2b00      	cmp	r3, #0
 8002838:	bf14      	ite	ne
 800283a:	2301      	movne	r3, #1
 800283c:	2300      	moveq	r3, #0
 800283e:	b2db      	uxtb	r3, r3
 8002840:	e00b      	b.n	800285a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	43da      	mvns	r2, r3
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	4013      	ands	r3, r2
 800284e:	b29b      	uxth	r3, r3
 8002850:	2b00      	cmp	r3, #0
 8002852:	bf14      	ite	ne
 8002854:	2301      	movne	r3, #1
 8002856:	2300      	moveq	r3, #0
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b00      	cmp	r3, #0
 800285c:	d18d      	bne.n	800277a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800285e:	2300      	movs	r3, #0
}
 8002860:	4618      	mov	r0, r3
 8002862:	3710      	adds	r7, #16
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}

08002868 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	60b9      	str	r1, [r7, #8]
 8002872:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002874:	e02d      	b.n	80028d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002876:	68f8      	ldr	r0, [r7, #12]
 8002878:	f000 f878 	bl	800296c <I2C_IsAcknowledgeFailed>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d001      	beq.n	8002886 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e02d      	b.n	80028e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800288c:	d021      	beq.n	80028d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800288e:	f7fe fbeb 	bl	8001068 <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	68ba      	ldr	r2, [r7, #8]
 800289a:	429a      	cmp	r2, r3
 800289c:	d302      	bcc.n	80028a4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d116      	bne.n	80028d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2200      	movs	r2, #0
 80028a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2220      	movs	r2, #32
 80028ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028be:	f043 0220 	orr.w	r2, r3, #32
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e007      	b.n	80028e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	695b      	ldr	r3, [r3, #20]
 80028d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028dc:	2b80      	cmp	r3, #128	; 0x80
 80028de:	d1ca      	bne.n	8002876 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3710      	adds	r7, #16
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}

080028ea <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028ea:	b580      	push	{r7, lr}
 80028ec:	b084      	sub	sp, #16
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	60f8      	str	r0, [r7, #12]
 80028f2:	60b9      	str	r1, [r7, #8]
 80028f4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80028f6:	e02d      	b.n	8002954 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80028f8:	68f8      	ldr	r0, [r7, #12]
 80028fa:	f000 f837 	bl	800296c <I2C_IsAcknowledgeFailed>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e02d      	b.n	8002964 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800290e:	d021      	beq.n	8002954 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002910:	f7fe fbaa 	bl	8001068 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	68ba      	ldr	r2, [r7, #8]
 800291c:	429a      	cmp	r2, r3
 800291e:	d302      	bcc.n	8002926 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d116      	bne.n	8002954 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2200      	movs	r2, #0
 800292a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2220      	movs	r2, #32
 8002930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2200      	movs	r2, #0
 8002938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002940:	f043 0220 	orr.w	r2, r3, #32
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2200      	movs	r2, #0
 800294c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e007      	b.n	8002964 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	f003 0304 	and.w	r3, r3, #4
 800295e:	2b04      	cmp	r3, #4
 8002960:	d1ca      	bne.n	80028f8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002962:	2300      	movs	r3, #0
}
 8002964:	4618      	mov	r0, r3
 8002966:	3710      	adds	r7, #16
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800297e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002982:	d11b      	bne.n	80029bc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800298c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2220      	movs	r2, #32
 8002998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a8:	f043 0204 	orr.w	r2, r3, #4
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e000      	b.n	80029be <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
	...

080029cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b086      	sub	sp, #24
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e264      	b.n	8002ea8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0301 	and.w	r3, r3, #1
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d075      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029ea:	4ba3      	ldr	r3, [pc, #652]	; (8002c78 <HAL_RCC_OscConfig+0x2ac>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f003 030c 	and.w	r3, r3, #12
 80029f2:	2b04      	cmp	r3, #4
 80029f4:	d00c      	beq.n	8002a10 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029f6:	4ba0      	ldr	r3, [pc, #640]	; (8002c78 <HAL_RCC_OscConfig+0x2ac>)
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029fe:	2b08      	cmp	r3, #8
 8002a00:	d112      	bne.n	8002a28 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a02:	4b9d      	ldr	r3, [pc, #628]	; (8002c78 <HAL_RCC_OscConfig+0x2ac>)
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a0e:	d10b      	bne.n	8002a28 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a10:	4b99      	ldr	r3, [pc, #612]	; (8002c78 <HAL_RCC_OscConfig+0x2ac>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d05b      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x108>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d157      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e23f      	b.n	8002ea8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a30:	d106      	bne.n	8002a40 <HAL_RCC_OscConfig+0x74>
 8002a32:	4b91      	ldr	r3, [pc, #580]	; (8002c78 <HAL_RCC_OscConfig+0x2ac>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a90      	ldr	r2, [pc, #576]	; (8002c78 <HAL_RCC_OscConfig+0x2ac>)
 8002a38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a3c:	6013      	str	r3, [r2, #0]
 8002a3e:	e01d      	b.n	8002a7c <HAL_RCC_OscConfig+0xb0>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a48:	d10c      	bne.n	8002a64 <HAL_RCC_OscConfig+0x98>
 8002a4a:	4b8b      	ldr	r3, [pc, #556]	; (8002c78 <HAL_RCC_OscConfig+0x2ac>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a8a      	ldr	r2, [pc, #552]	; (8002c78 <HAL_RCC_OscConfig+0x2ac>)
 8002a50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a54:	6013      	str	r3, [r2, #0]
 8002a56:	4b88      	ldr	r3, [pc, #544]	; (8002c78 <HAL_RCC_OscConfig+0x2ac>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a87      	ldr	r2, [pc, #540]	; (8002c78 <HAL_RCC_OscConfig+0x2ac>)
 8002a5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a60:	6013      	str	r3, [r2, #0]
 8002a62:	e00b      	b.n	8002a7c <HAL_RCC_OscConfig+0xb0>
 8002a64:	4b84      	ldr	r3, [pc, #528]	; (8002c78 <HAL_RCC_OscConfig+0x2ac>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a83      	ldr	r2, [pc, #524]	; (8002c78 <HAL_RCC_OscConfig+0x2ac>)
 8002a6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a6e:	6013      	str	r3, [r2, #0]
 8002a70:	4b81      	ldr	r3, [pc, #516]	; (8002c78 <HAL_RCC_OscConfig+0x2ac>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a80      	ldr	r2, [pc, #512]	; (8002c78 <HAL_RCC_OscConfig+0x2ac>)
 8002a76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d013      	beq.n	8002aac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a84:	f7fe faf0 	bl	8001068 <HAL_GetTick>
 8002a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a8c:	f7fe faec 	bl	8001068 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b64      	cmp	r3, #100	; 0x64
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e204      	b.n	8002ea8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a9e:	4b76      	ldr	r3, [pc, #472]	; (8002c78 <HAL_RCC_OscConfig+0x2ac>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d0f0      	beq.n	8002a8c <HAL_RCC_OscConfig+0xc0>
 8002aaa:	e014      	b.n	8002ad6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aac:	f7fe fadc 	bl	8001068 <HAL_GetTick>
 8002ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ab2:	e008      	b.n	8002ac6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ab4:	f7fe fad8 	bl	8001068 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b64      	cmp	r3, #100	; 0x64
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e1f0      	b.n	8002ea8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ac6:	4b6c      	ldr	r3, [pc, #432]	; (8002c78 <HAL_RCC_OscConfig+0x2ac>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d1f0      	bne.n	8002ab4 <HAL_RCC_OscConfig+0xe8>
 8002ad2:	e000      	b.n	8002ad6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ad4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d063      	beq.n	8002baa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ae2:	4b65      	ldr	r3, [pc, #404]	; (8002c78 <HAL_RCC_OscConfig+0x2ac>)
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f003 030c 	and.w	r3, r3, #12
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d00b      	beq.n	8002b06 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002aee:	4b62      	ldr	r3, [pc, #392]	; (8002c78 <HAL_RCC_OscConfig+0x2ac>)
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002af6:	2b08      	cmp	r3, #8
 8002af8:	d11c      	bne.n	8002b34 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002afa:	4b5f      	ldr	r3, [pc, #380]	; (8002c78 <HAL_RCC_OscConfig+0x2ac>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d116      	bne.n	8002b34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b06:	4b5c      	ldr	r3, [pc, #368]	; (8002c78 <HAL_RCC_OscConfig+0x2ac>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d005      	beq.n	8002b1e <HAL_RCC_OscConfig+0x152>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d001      	beq.n	8002b1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e1c4      	b.n	8002ea8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b1e:	4b56      	ldr	r3, [pc, #344]	; (8002c78 <HAL_RCC_OscConfig+0x2ac>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	4952      	ldr	r1, [pc, #328]	; (8002c78 <HAL_RCC_OscConfig+0x2ac>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b32:	e03a      	b.n	8002baa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d020      	beq.n	8002b7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b3c:	4b4f      	ldr	r3, [pc, #316]	; (8002c7c <HAL_RCC_OscConfig+0x2b0>)
 8002b3e:	2201      	movs	r2, #1
 8002b40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b42:	f7fe fa91 	bl	8001068 <HAL_GetTick>
 8002b46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b48:	e008      	b.n	8002b5c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b4a:	f7fe fa8d 	bl	8001068 <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d901      	bls.n	8002b5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e1a5      	b.n	8002ea8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b5c:	4b46      	ldr	r3, [pc, #280]	; (8002c78 <HAL_RCC_OscConfig+0x2ac>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0302 	and.w	r3, r3, #2
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d0f0      	beq.n	8002b4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b68:	4b43      	ldr	r3, [pc, #268]	; (8002c78 <HAL_RCC_OscConfig+0x2ac>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	691b      	ldr	r3, [r3, #16]
 8002b74:	00db      	lsls	r3, r3, #3
 8002b76:	4940      	ldr	r1, [pc, #256]	; (8002c78 <HAL_RCC_OscConfig+0x2ac>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	600b      	str	r3, [r1, #0]
 8002b7c:	e015      	b.n	8002baa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b7e:	4b3f      	ldr	r3, [pc, #252]	; (8002c7c <HAL_RCC_OscConfig+0x2b0>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b84:	f7fe fa70 	bl	8001068 <HAL_GetTick>
 8002b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b8a:	e008      	b.n	8002b9e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b8c:	f7fe fa6c 	bl	8001068 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d901      	bls.n	8002b9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e184      	b.n	8002ea8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b9e:	4b36      	ldr	r3, [pc, #216]	; (8002c78 <HAL_RCC_OscConfig+0x2ac>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d1f0      	bne.n	8002b8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0308 	and.w	r3, r3, #8
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d030      	beq.n	8002c18 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	695b      	ldr	r3, [r3, #20]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d016      	beq.n	8002bec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bbe:	4b30      	ldr	r3, [pc, #192]	; (8002c80 <HAL_RCC_OscConfig+0x2b4>)
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bc4:	f7fe fa50 	bl	8001068 <HAL_GetTick>
 8002bc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bca:	e008      	b.n	8002bde <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bcc:	f7fe fa4c 	bl	8001068 <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e164      	b.n	8002ea8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bde:	4b26      	ldr	r3, [pc, #152]	; (8002c78 <HAL_RCC_OscConfig+0x2ac>)
 8002be0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d0f0      	beq.n	8002bcc <HAL_RCC_OscConfig+0x200>
 8002bea:	e015      	b.n	8002c18 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bec:	4b24      	ldr	r3, [pc, #144]	; (8002c80 <HAL_RCC_OscConfig+0x2b4>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bf2:	f7fe fa39 	bl	8001068 <HAL_GetTick>
 8002bf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bf8:	e008      	b.n	8002c0c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bfa:	f7fe fa35 	bl	8001068 <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d901      	bls.n	8002c0c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e14d      	b.n	8002ea8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c0c:	4b1a      	ldr	r3, [pc, #104]	; (8002c78 <HAL_RCC_OscConfig+0x2ac>)
 8002c0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c10:	f003 0302 	and.w	r3, r3, #2
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d1f0      	bne.n	8002bfa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0304 	and.w	r3, r3, #4
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	f000 80a0 	beq.w	8002d66 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c26:	2300      	movs	r3, #0
 8002c28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c2a:	4b13      	ldr	r3, [pc, #76]	; (8002c78 <HAL_RCC_OscConfig+0x2ac>)
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d10f      	bne.n	8002c56 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c36:	2300      	movs	r3, #0
 8002c38:	60bb      	str	r3, [r7, #8]
 8002c3a:	4b0f      	ldr	r3, [pc, #60]	; (8002c78 <HAL_RCC_OscConfig+0x2ac>)
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3e:	4a0e      	ldr	r2, [pc, #56]	; (8002c78 <HAL_RCC_OscConfig+0x2ac>)
 8002c40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c44:	6413      	str	r3, [r2, #64]	; 0x40
 8002c46:	4b0c      	ldr	r3, [pc, #48]	; (8002c78 <HAL_RCC_OscConfig+0x2ac>)
 8002c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c4e:	60bb      	str	r3, [r7, #8]
 8002c50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c52:	2301      	movs	r3, #1
 8002c54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c56:	4b0b      	ldr	r3, [pc, #44]	; (8002c84 <HAL_RCC_OscConfig+0x2b8>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d121      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c62:	4b08      	ldr	r3, [pc, #32]	; (8002c84 <HAL_RCC_OscConfig+0x2b8>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a07      	ldr	r2, [pc, #28]	; (8002c84 <HAL_RCC_OscConfig+0x2b8>)
 8002c68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c6e:	f7fe f9fb 	bl	8001068 <HAL_GetTick>
 8002c72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c74:	e011      	b.n	8002c9a <HAL_RCC_OscConfig+0x2ce>
 8002c76:	bf00      	nop
 8002c78:	40023800 	.word	0x40023800
 8002c7c:	42470000 	.word	0x42470000
 8002c80:	42470e80 	.word	0x42470e80
 8002c84:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c88:	f7fe f9ee 	bl	8001068 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e106      	b.n	8002ea8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c9a:	4b85      	ldr	r3, [pc, #532]	; (8002eb0 <HAL_RCC_OscConfig+0x4e4>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d0f0      	beq.n	8002c88 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d106      	bne.n	8002cbc <HAL_RCC_OscConfig+0x2f0>
 8002cae:	4b81      	ldr	r3, [pc, #516]	; (8002eb4 <HAL_RCC_OscConfig+0x4e8>)
 8002cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb2:	4a80      	ldr	r2, [pc, #512]	; (8002eb4 <HAL_RCC_OscConfig+0x4e8>)
 8002cb4:	f043 0301 	orr.w	r3, r3, #1
 8002cb8:	6713      	str	r3, [r2, #112]	; 0x70
 8002cba:	e01c      	b.n	8002cf6 <HAL_RCC_OscConfig+0x32a>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	2b05      	cmp	r3, #5
 8002cc2:	d10c      	bne.n	8002cde <HAL_RCC_OscConfig+0x312>
 8002cc4:	4b7b      	ldr	r3, [pc, #492]	; (8002eb4 <HAL_RCC_OscConfig+0x4e8>)
 8002cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc8:	4a7a      	ldr	r2, [pc, #488]	; (8002eb4 <HAL_RCC_OscConfig+0x4e8>)
 8002cca:	f043 0304 	orr.w	r3, r3, #4
 8002cce:	6713      	str	r3, [r2, #112]	; 0x70
 8002cd0:	4b78      	ldr	r3, [pc, #480]	; (8002eb4 <HAL_RCC_OscConfig+0x4e8>)
 8002cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd4:	4a77      	ldr	r2, [pc, #476]	; (8002eb4 <HAL_RCC_OscConfig+0x4e8>)
 8002cd6:	f043 0301 	orr.w	r3, r3, #1
 8002cda:	6713      	str	r3, [r2, #112]	; 0x70
 8002cdc:	e00b      	b.n	8002cf6 <HAL_RCC_OscConfig+0x32a>
 8002cde:	4b75      	ldr	r3, [pc, #468]	; (8002eb4 <HAL_RCC_OscConfig+0x4e8>)
 8002ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce2:	4a74      	ldr	r2, [pc, #464]	; (8002eb4 <HAL_RCC_OscConfig+0x4e8>)
 8002ce4:	f023 0301 	bic.w	r3, r3, #1
 8002ce8:	6713      	str	r3, [r2, #112]	; 0x70
 8002cea:	4b72      	ldr	r3, [pc, #456]	; (8002eb4 <HAL_RCC_OscConfig+0x4e8>)
 8002cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cee:	4a71      	ldr	r2, [pc, #452]	; (8002eb4 <HAL_RCC_OscConfig+0x4e8>)
 8002cf0:	f023 0304 	bic.w	r3, r3, #4
 8002cf4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d015      	beq.n	8002d2a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cfe:	f7fe f9b3 	bl	8001068 <HAL_GetTick>
 8002d02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d04:	e00a      	b.n	8002d1c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d06:	f7fe f9af 	bl	8001068 <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d901      	bls.n	8002d1c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e0c5      	b.n	8002ea8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d1c:	4b65      	ldr	r3, [pc, #404]	; (8002eb4 <HAL_RCC_OscConfig+0x4e8>)
 8002d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d20:	f003 0302 	and.w	r3, r3, #2
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d0ee      	beq.n	8002d06 <HAL_RCC_OscConfig+0x33a>
 8002d28:	e014      	b.n	8002d54 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d2a:	f7fe f99d 	bl	8001068 <HAL_GetTick>
 8002d2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d30:	e00a      	b.n	8002d48 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d32:	f7fe f999 	bl	8001068 <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d901      	bls.n	8002d48 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	e0af      	b.n	8002ea8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d48:	4b5a      	ldr	r3, [pc, #360]	; (8002eb4 <HAL_RCC_OscConfig+0x4e8>)
 8002d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d4c:	f003 0302 	and.w	r3, r3, #2
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d1ee      	bne.n	8002d32 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d54:	7dfb      	ldrb	r3, [r7, #23]
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d105      	bne.n	8002d66 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d5a:	4b56      	ldr	r3, [pc, #344]	; (8002eb4 <HAL_RCC_OscConfig+0x4e8>)
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5e:	4a55      	ldr	r2, [pc, #340]	; (8002eb4 <HAL_RCC_OscConfig+0x4e8>)
 8002d60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d64:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	699b      	ldr	r3, [r3, #24]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	f000 809b 	beq.w	8002ea6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d70:	4b50      	ldr	r3, [pc, #320]	; (8002eb4 <HAL_RCC_OscConfig+0x4e8>)
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f003 030c 	and.w	r3, r3, #12
 8002d78:	2b08      	cmp	r3, #8
 8002d7a:	d05c      	beq.n	8002e36 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d141      	bne.n	8002e08 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d84:	4b4c      	ldr	r3, [pc, #304]	; (8002eb8 <HAL_RCC_OscConfig+0x4ec>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d8a:	f7fe f96d 	bl	8001068 <HAL_GetTick>
 8002d8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d90:	e008      	b.n	8002da4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d92:	f7fe f969 	bl	8001068 <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d901      	bls.n	8002da4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e081      	b.n	8002ea8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002da4:	4b43      	ldr	r3, [pc, #268]	; (8002eb4 <HAL_RCC_OscConfig+0x4e8>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d1f0      	bne.n	8002d92 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	69da      	ldr	r2, [r3, #28]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a1b      	ldr	r3, [r3, #32]
 8002db8:	431a      	orrs	r2, r3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbe:	019b      	lsls	r3, r3, #6
 8002dc0:	431a      	orrs	r2, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc6:	085b      	lsrs	r3, r3, #1
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	041b      	lsls	r3, r3, #16
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd2:	061b      	lsls	r3, r3, #24
 8002dd4:	4937      	ldr	r1, [pc, #220]	; (8002eb4 <HAL_RCC_OscConfig+0x4e8>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dda:	4b37      	ldr	r3, [pc, #220]	; (8002eb8 <HAL_RCC_OscConfig+0x4ec>)
 8002ddc:	2201      	movs	r2, #1
 8002dde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de0:	f7fe f942 	bl	8001068 <HAL_GetTick>
 8002de4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002de6:	e008      	b.n	8002dfa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002de8:	f7fe f93e 	bl	8001068 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e056      	b.n	8002ea8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dfa:	4b2e      	ldr	r3, [pc, #184]	; (8002eb4 <HAL_RCC_OscConfig+0x4e8>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d0f0      	beq.n	8002de8 <HAL_RCC_OscConfig+0x41c>
 8002e06:	e04e      	b.n	8002ea6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e08:	4b2b      	ldr	r3, [pc, #172]	; (8002eb8 <HAL_RCC_OscConfig+0x4ec>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e0e:	f7fe f92b 	bl	8001068 <HAL_GetTick>
 8002e12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e14:	e008      	b.n	8002e28 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e16:	f7fe f927 	bl	8001068 <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d901      	bls.n	8002e28 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e03f      	b.n	8002ea8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e28:	4b22      	ldr	r3, [pc, #136]	; (8002eb4 <HAL_RCC_OscConfig+0x4e8>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d1f0      	bne.n	8002e16 <HAL_RCC_OscConfig+0x44a>
 8002e34:	e037      	b.n	8002ea6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	699b      	ldr	r3, [r3, #24]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d101      	bne.n	8002e42 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e032      	b.n	8002ea8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e42:	4b1c      	ldr	r3, [pc, #112]	; (8002eb4 <HAL_RCC_OscConfig+0x4e8>)
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	699b      	ldr	r3, [r3, #24]
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d028      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d121      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d11a      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e6c:	68fa      	ldr	r2, [r7, #12]
 8002e6e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e72:	4013      	ands	r3, r2
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e78:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d111      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e88:	085b      	lsrs	r3, r3, #1
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d107      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e9c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d001      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e000      	b.n	8002ea8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002ea6:	2300      	movs	r3, #0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3718      	adds	r7, #24
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	40007000 	.word	0x40007000
 8002eb4:	40023800 	.word	0x40023800
 8002eb8:	42470060 	.word	0x42470060

08002ebc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d101      	bne.n	8002ed0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e0cc      	b.n	800306a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ed0:	4b68      	ldr	r3, [pc, #416]	; (8003074 <HAL_RCC_ClockConfig+0x1b8>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0307 	and.w	r3, r3, #7
 8002ed8:	683a      	ldr	r2, [r7, #0]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d90c      	bls.n	8002ef8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ede:	4b65      	ldr	r3, [pc, #404]	; (8003074 <HAL_RCC_ClockConfig+0x1b8>)
 8002ee0:	683a      	ldr	r2, [r7, #0]
 8002ee2:	b2d2      	uxtb	r2, r2
 8002ee4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ee6:	4b63      	ldr	r3, [pc, #396]	; (8003074 <HAL_RCC_ClockConfig+0x1b8>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0307 	and.w	r3, r3, #7
 8002eee:	683a      	ldr	r2, [r7, #0]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d001      	beq.n	8002ef8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e0b8      	b.n	800306a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0302 	and.w	r3, r3, #2
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d020      	beq.n	8002f46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0304 	and.w	r3, r3, #4
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d005      	beq.n	8002f1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f10:	4b59      	ldr	r3, [pc, #356]	; (8003078 <HAL_RCC_ClockConfig+0x1bc>)
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	4a58      	ldr	r2, [pc, #352]	; (8003078 <HAL_RCC_ClockConfig+0x1bc>)
 8002f16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0308 	and.w	r3, r3, #8
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d005      	beq.n	8002f34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f28:	4b53      	ldr	r3, [pc, #332]	; (8003078 <HAL_RCC_ClockConfig+0x1bc>)
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	4a52      	ldr	r2, [pc, #328]	; (8003078 <HAL_RCC_ClockConfig+0x1bc>)
 8002f2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f34:	4b50      	ldr	r3, [pc, #320]	; (8003078 <HAL_RCC_ClockConfig+0x1bc>)
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	494d      	ldr	r1, [pc, #308]	; (8003078 <HAL_RCC_ClockConfig+0x1bc>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0301 	and.w	r3, r3, #1
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d044      	beq.n	8002fdc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d107      	bne.n	8002f6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f5a:	4b47      	ldr	r3, [pc, #284]	; (8003078 <HAL_RCC_ClockConfig+0x1bc>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d119      	bne.n	8002f9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e07f      	b.n	800306a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d003      	beq.n	8002f7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f76:	2b03      	cmp	r3, #3
 8002f78:	d107      	bne.n	8002f8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f7a:	4b3f      	ldr	r3, [pc, #252]	; (8003078 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d109      	bne.n	8002f9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e06f      	b.n	800306a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f8a:	4b3b      	ldr	r3, [pc, #236]	; (8003078 <HAL_RCC_ClockConfig+0x1bc>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d101      	bne.n	8002f9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e067      	b.n	800306a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f9a:	4b37      	ldr	r3, [pc, #220]	; (8003078 <HAL_RCC_ClockConfig+0x1bc>)
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f023 0203 	bic.w	r2, r3, #3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	4934      	ldr	r1, [pc, #208]	; (8003078 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fac:	f7fe f85c 	bl	8001068 <HAL_GetTick>
 8002fb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fb2:	e00a      	b.n	8002fca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fb4:	f7fe f858 	bl	8001068 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e04f      	b.n	800306a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fca:	4b2b      	ldr	r3, [pc, #172]	; (8003078 <HAL_RCC_ClockConfig+0x1bc>)
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f003 020c 	and.w	r2, r3, #12
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d1eb      	bne.n	8002fb4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fdc:	4b25      	ldr	r3, [pc, #148]	; (8003074 <HAL_RCC_ClockConfig+0x1b8>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0307 	and.w	r3, r3, #7
 8002fe4:	683a      	ldr	r2, [r7, #0]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d20c      	bcs.n	8003004 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fea:	4b22      	ldr	r3, [pc, #136]	; (8003074 <HAL_RCC_ClockConfig+0x1b8>)
 8002fec:	683a      	ldr	r2, [r7, #0]
 8002fee:	b2d2      	uxtb	r2, r2
 8002ff0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ff2:	4b20      	ldr	r3, [pc, #128]	; (8003074 <HAL_RCC_ClockConfig+0x1b8>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0307 	and.w	r3, r3, #7
 8002ffa:	683a      	ldr	r2, [r7, #0]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d001      	beq.n	8003004 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e032      	b.n	800306a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0304 	and.w	r3, r3, #4
 800300c:	2b00      	cmp	r3, #0
 800300e:	d008      	beq.n	8003022 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003010:	4b19      	ldr	r3, [pc, #100]	; (8003078 <HAL_RCC_ClockConfig+0x1bc>)
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	4916      	ldr	r1, [pc, #88]	; (8003078 <HAL_RCC_ClockConfig+0x1bc>)
 800301e:	4313      	orrs	r3, r2
 8003020:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0308 	and.w	r3, r3, #8
 800302a:	2b00      	cmp	r3, #0
 800302c:	d009      	beq.n	8003042 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800302e:	4b12      	ldr	r3, [pc, #72]	; (8003078 <HAL_RCC_ClockConfig+0x1bc>)
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	00db      	lsls	r3, r3, #3
 800303c:	490e      	ldr	r1, [pc, #56]	; (8003078 <HAL_RCC_ClockConfig+0x1bc>)
 800303e:	4313      	orrs	r3, r2
 8003040:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003042:	f000 f821 	bl	8003088 <HAL_RCC_GetSysClockFreq>
 8003046:	4602      	mov	r2, r0
 8003048:	4b0b      	ldr	r3, [pc, #44]	; (8003078 <HAL_RCC_ClockConfig+0x1bc>)
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	091b      	lsrs	r3, r3, #4
 800304e:	f003 030f 	and.w	r3, r3, #15
 8003052:	490a      	ldr	r1, [pc, #40]	; (800307c <HAL_RCC_ClockConfig+0x1c0>)
 8003054:	5ccb      	ldrb	r3, [r1, r3]
 8003056:	fa22 f303 	lsr.w	r3, r2, r3
 800305a:	4a09      	ldr	r2, [pc, #36]	; (8003080 <HAL_RCC_ClockConfig+0x1c4>)
 800305c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800305e:	4b09      	ldr	r3, [pc, #36]	; (8003084 <HAL_RCC_ClockConfig+0x1c8>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4618      	mov	r0, r3
 8003064:	f7fd ffbc 	bl	8000fe0 <HAL_InitTick>

  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3710      	adds	r7, #16
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	40023c00 	.word	0x40023c00
 8003078:	40023800 	.word	0x40023800
 800307c:	08003b7c 	.word	0x08003b7c
 8003080:	20000000 	.word	0x20000000
 8003084:	20000004 	.word	0x20000004

08003088 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003088:	b5b0      	push	{r4, r5, r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800308e:	2100      	movs	r1, #0
 8003090:	6079      	str	r1, [r7, #4]
 8003092:	2100      	movs	r1, #0
 8003094:	60f9      	str	r1, [r7, #12]
 8003096:	2100      	movs	r1, #0
 8003098:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800309a:	2100      	movs	r1, #0
 800309c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800309e:	4952      	ldr	r1, [pc, #328]	; (80031e8 <HAL_RCC_GetSysClockFreq+0x160>)
 80030a0:	6889      	ldr	r1, [r1, #8]
 80030a2:	f001 010c 	and.w	r1, r1, #12
 80030a6:	2908      	cmp	r1, #8
 80030a8:	d00d      	beq.n	80030c6 <HAL_RCC_GetSysClockFreq+0x3e>
 80030aa:	2908      	cmp	r1, #8
 80030ac:	f200 8094 	bhi.w	80031d8 <HAL_RCC_GetSysClockFreq+0x150>
 80030b0:	2900      	cmp	r1, #0
 80030b2:	d002      	beq.n	80030ba <HAL_RCC_GetSysClockFreq+0x32>
 80030b4:	2904      	cmp	r1, #4
 80030b6:	d003      	beq.n	80030c0 <HAL_RCC_GetSysClockFreq+0x38>
 80030b8:	e08e      	b.n	80031d8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030ba:	4b4c      	ldr	r3, [pc, #304]	; (80031ec <HAL_RCC_GetSysClockFreq+0x164>)
 80030bc:	60bb      	str	r3, [r7, #8]
       break;
 80030be:	e08e      	b.n	80031de <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030c0:	4b4b      	ldr	r3, [pc, #300]	; (80031f0 <HAL_RCC_GetSysClockFreq+0x168>)
 80030c2:	60bb      	str	r3, [r7, #8]
      break;
 80030c4:	e08b      	b.n	80031de <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030c6:	4948      	ldr	r1, [pc, #288]	; (80031e8 <HAL_RCC_GetSysClockFreq+0x160>)
 80030c8:	6849      	ldr	r1, [r1, #4]
 80030ca:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80030ce:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030d0:	4945      	ldr	r1, [pc, #276]	; (80031e8 <HAL_RCC_GetSysClockFreq+0x160>)
 80030d2:	6849      	ldr	r1, [r1, #4]
 80030d4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80030d8:	2900      	cmp	r1, #0
 80030da:	d024      	beq.n	8003126 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030dc:	4942      	ldr	r1, [pc, #264]	; (80031e8 <HAL_RCC_GetSysClockFreq+0x160>)
 80030de:	6849      	ldr	r1, [r1, #4]
 80030e0:	0989      	lsrs	r1, r1, #6
 80030e2:	4608      	mov	r0, r1
 80030e4:	f04f 0100 	mov.w	r1, #0
 80030e8:	f240 14ff 	movw	r4, #511	; 0x1ff
 80030ec:	f04f 0500 	mov.w	r5, #0
 80030f0:	ea00 0204 	and.w	r2, r0, r4
 80030f4:	ea01 0305 	and.w	r3, r1, r5
 80030f8:	493d      	ldr	r1, [pc, #244]	; (80031f0 <HAL_RCC_GetSysClockFreq+0x168>)
 80030fa:	fb01 f003 	mul.w	r0, r1, r3
 80030fe:	2100      	movs	r1, #0
 8003100:	fb01 f102 	mul.w	r1, r1, r2
 8003104:	1844      	adds	r4, r0, r1
 8003106:	493a      	ldr	r1, [pc, #232]	; (80031f0 <HAL_RCC_GetSysClockFreq+0x168>)
 8003108:	fba2 0101 	umull	r0, r1, r2, r1
 800310c:	1863      	adds	r3, r4, r1
 800310e:	4619      	mov	r1, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	461a      	mov	r2, r3
 8003114:	f04f 0300 	mov.w	r3, #0
 8003118:	f7fd f8b2 	bl	8000280 <__aeabi_uldivmod>
 800311c:	4602      	mov	r2, r0
 800311e:	460b      	mov	r3, r1
 8003120:	4613      	mov	r3, r2
 8003122:	60fb      	str	r3, [r7, #12]
 8003124:	e04a      	b.n	80031bc <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003126:	4b30      	ldr	r3, [pc, #192]	; (80031e8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	099b      	lsrs	r3, r3, #6
 800312c:	461a      	mov	r2, r3
 800312e:	f04f 0300 	mov.w	r3, #0
 8003132:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003136:	f04f 0100 	mov.w	r1, #0
 800313a:	ea02 0400 	and.w	r4, r2, r0
 800313e:	ea03 0501 	and.w	r5, r3, r1
 8003142:	4620      	mov	r0, r4
 8003144:	4629      	mov	r1, r5
 8003146:	f04f 0200 	mov.w	r2, #0
 800314a:	f04f 0300 	mov.w	r3, #0
 800314e:	014b      	lsls	r3, r1, #5
 8003150:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003154:	0142      	lsls	r2, r0, #5
 8003156:	4610      	mov	r0, r2
 8003158:	4619      	mov	r1, r3
 800315a:	1b00      	subs	r0, r0, r4
 800315c:	eb61 0105 	sbc.w	r1, r1, r5
 8003160:	f04f 0200 	mov.w	r2, #0
 8003164:	f04f 0300 	mov.w	r3, #0
 8003168:	018b      	lsls	r3, r1, #6
 800316a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800316e:	0182      	lsls	r2, r0, #6
 8003170:	1a12      	subs	r2, r2, r0
 8003172:	eb63 0301 	sbc.w	r3, r3, r1
 8003176:	f04f 0000 	mov.w	r0, #0
 800317a:	f04f 0100 	mov.w	r1, #0
 800317e:	00d9      	lsls	r1, r3, #3
 8003180:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003184:	00d0      	lsls	r0, r2, #3
 8003186:	4602      	mov	r2, r0
 8003188:	460b      	mov	r3, r1
 800318a:	1912      	adds	r2, r2, r4
 800318c:	eb45 0303 	adc.w	r3, r5, r3
 8003190:	f04f 0000 	mov.w	r0, #0
 8003194:	f04f 0100 	mov.w	r1, #0
 8003198:	0299      	lsls	r1, r3, #10
 800319a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800319e:	0290      	lsls	r0, r2, #10
 80031a0:	4602      	mov	r2, r0
 80031a2:	460b      	mov	r3, r1
 80031a4:	4610      	mov	r0, r2
 80031a6:	4619      	mov	r1, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	461a      	mov	r2, r3
 80031ac:	f04f 0300 	mov.w	r3, #0
 80031b0:	f7fd f866 	bl	8000280 <__aeabi_uldivmod>
 80031b4:	4602      	mov	r2, r0
 80031b6:	460b      	mov	r3, r1
 80031b8:	4613      	mov	r3, r2
 80031ba:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80031bc:	4b0a      	ldr	r3, [pc, #40]	; (80031e8 <HAL_RCC_GetSysClockFreq+0x160>)
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	0c1b      	lsrs	r3, r3, #16
 80031c2:	f003 0303 	and.w	r3, r3, #3
 80031c6:	3301      	adds	r3, #1
 80031c8:	005b      	lsls	r3, r3, #1
 80031ca:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80031cc:	68fa      	ldr	r2, [r7, #12]
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031d4:	60bb      	str	r3, [r7, #8]
      break;
 80031d6:	e002      	b.n	80031de <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031d8:	4b04      	ldr	r3, [pc, #16]	; (80031ec <HAL_RCC_GetSysClockFreq+0x164>)
 80031da:	60bb      	str	r3, [r7, #8]
      break;
 80031dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031de:	68bb      	ldr	r3, [r7, #8]
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3710      	adds	r7, #16
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bdb0      	pop	{r4, r5, r7, pc}
 80031e8:	40023800 	.word	0x40023800
 80031ec:	00f42400 	.word	0x00f42400
 80031f0:	017d7840 	.word	0x017d7840

080031f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031f4:	b480      	push	{r7}
 80031f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031f8:	4b03      	ldr	r3, [pc, #12]	; (8003208 <HAL_RCC_GetHCLKFreq+0x14>)
 80031fa:	681b      	ldr	r3, [r3, #0]
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	20000000 	.word	0x20000000

0800320c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003210:	f7ff fff0 	bl	80031f4 <HAL_RCC_GetHCLKFreq>
 8003214:	4602      	mov	r2, r0
 8003216:	4b05      	ldr	r3, [pc, #20]	; (800322c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	0a9b      	lsrs	r3, r3, #10
 800321c:	f003 0307 	and.w	r3, r3, #7
 8003220:	4903      	ldr	r1, [pc, #12]	; (8003230 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003222:	5ccb      	ldrb	r3, [r1, r3]
 8003224:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003228:	4618      	mov	r0, r3
 800322a:	bd80      	pop	{r7, pc}
 800322c:	40023800 	.word	0x40023800
 8003230:	08003b8c 	.word	0x08003b8c

08003234 <__errno>:
 8003234:	4b01      	ldr	r3, [pc, #4]	; (800323c <__errno+0x8>)
 8003236:	6818      	ldr	r0, [r3, #0]
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	2000000c 	.word	0x2000000c

08003240 <__libc_init_array>:
 8003240:	b570      	push	{r4, r5, r6, lr}
 8003242:	4d0d      	ldr	r5, [pc, #52]	; (8003278 <__libc_init_array+0x38>)
 8003244:	4c0d      	ldr	r4, [pc, #52]	; (800327c <__libc_init_array+0x3c>)
 8003246:	1b64      	subs	r4, r4, r5
 8003248:	10a4      	asrs	r4, r4, #2
 800324a:	2600      	movs	r6, #0
 800324c:	42a6      	cmp	r6, r4
 800324e:	d109      	bne.n	8003264 <__libc_init_array+0x24>
 8003250:	4d0b      	ldr	r5, [pc, #44]	; (8003280 <__libc_init_array+0x40>)
 8003252:	4c0c      	ldr	r4, [pc, #48]	; (8003284 <__libc_init_array+0x44>)
 8003254:	f000 fc4e 	bl	8003af4 <_init>
 8003258:	1b64      	subs	r4, r4, r5
 800325a:	10a4      	asrs	r4, r4, #2
 800325c:	2600      	movs	r6, #0
 800325e:	42a6      	cmp	r6, r4
 8003260:	d105      	bne.n	800326e <__libc_init_array+0x2e>
 8003262:	bd70      	pop	{r4, r5, r6, pc}
 8003264:	f855 3b04 	ldr.w	r3, [r5], #4
 8003268:	4798      	blx	r3
 800326a:	3601      	adds	r6, #1
 800326c:	e7ee      	b.n	800324c <__libc_init_array+0xc>
 800326e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003272:	4798      	blx	r3
 8003274:	3601      	adds	r6, #1
 8003276:	e7f2      	b.n	800325e <__libc_init_array+0x1e>
 8003278:	08003bd0 	.word	0x08003bd0
 800327c:	08003bd0 	.word	0x08003bd0
 8003280:	08003bd0 	.word	0x08003bd0
 8003284:	08003bd4 	.word	0x08003bd4

08003288 <memset>:
 8003288:	4402      	add	r2, r0
 800328a:	4603      	mov	r3, r0
 800328c:	4293      	cmp	r3, r2
 800328e:	d100      	bne.n	8003292 <memset+0xa>
 8003290:	4770      	bx	lr
 8003292:	f803 1b01 	strb.w	r1, [r3], #1
 8003296:	e7f9      	b.n	800328c <memset+0x4>

08003298 <siprintf>:
 8003298:	b40e      	push	{r1, r2, r3}
 800329a:	b500      	push	{lr}
 800329c:	b09c      	sub	sp, #112	; 0x70
 800329e:	ab1d      	add	r3, sp, #116	; 0x74
 80032a0:	9002      	str	r0, [sp, #8]
 80032a2:	9006      	str	r0, [sp, #24]
 80032a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80032a8:	4809      	ldr	r0, [pc, #36]	; (80032d0 <siprintf+0x38>)
 80032aa:	9107      	str	r1, [sp, #28]
 80032ac:	9104      	str	r1, [sp, #16]
 80032ae:	4909      	ldr	r1, [pc, #36]	; (80032d4 <siprintf+0x3c>)
 80032b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80032b4:	9105      	str	r1, [sp, #20]
 80032b6:	6800      	ldr	r0, [r0, #0]
 80032b8:	9301      	str	r3, [sp, #4]
 80032ba:	a902      	add	r1, sp, #8
 80032bc:	f000 f868 	bl	8003390 <_svfiprintf_r>
 80032c0:	9b02      	ldr	r3, [sp, #8]
 80032c2:	2200      	movs	r2, #0
 80032c4:	701a      	strb	r2, [r3, #0]
 80032c6:	b01c      	add	sp, #112	; 0x70
 80032c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80032cc:	b003      	add	sp, #12
 80032ce:	4770      	bx	lr
 80032d0:	2000000c 	.word	0x2000000c
 80032d4:	ffff0208 	.word	0xffff0208

080032d8 <__ssputs_r>:
 80032d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032dc:	688e      	ldr	r6, [r1, #8]
 80032de:	429e      	cmp	r6, r3
 80032e0:	4682      	mov	sl, r0
 80032e2:	460c      	mov	r4, r1
 80032e4:	4690      	mov	r8, r2
 80032e6:	461f      	mov	r7, r3
 80032e8:	d838      	bhi.n	800335c <__ssputs_r+0x84>
 80032ea:	898a      	ldrh	r2, [r1, #12]
 80032ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80032f0:	d032      	beq.n	8003358 <__ssputs_r+0x80>
 80032f2:	6825      	ldr	r5, [r4, #0]
 80032f4:	6909      	ldr	r1, [r1, #16]
 80032f6:	eba5 0901 	sub.w	r9, r5, r1
 80032fa:	6965      	ldr	r5, [r4, #20]
 80032fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003300:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003304:	3301      	adds	r3, #1
 8003306:	444b      	add	r3, r9
 8003308:	106d      	asrs	r5, r5, #1
 800330a:	429d      	cmp	r5, r3
 800330c:	bf38      	it	cc
 800330e:	461d      	movcc	r5, r3
 8003310:	0553      	lsls	r3, r2, #21
 8003312:	d531      	bpl.n	8003378 <__ssputs_r+0xa0>
 8003314:	4629      	mov	r1, r5
 8003316:	f000 fb47 	bl	80039a8 <_malloc_r>
 800331a:	4606      	mov	r6, r0
 800331c:	b950      	cbnz	r0, 8003334 <__ssputs_r+0x5c>
 800331e:	230c      	movs	r3, #12
 8003320:	f8ca 3000 	str.w	r3, [sl]
 8003324:	89a3      	ldrh	r3, [r4, #12]
 8003326:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800332a:	81a3      	strh	r3, [r4, #12]
 800332c:	f04f 30ff 	mov.w	r0, #4294967295
 8003330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003334:	6921      	ldr	r1, [r4, #16]
 8003336:	464a      	mov	r2, r9
 8003338:	f000 fabe 	bl	80038b8 <memcpy>
 800333c:	89a3      	ldrh	r3, [r4, #12]
 800333e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003342:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003346:	81a3      	strh	r3, [r4, #12]
 8003348:	6126      	str	r6, [r4, #16]
 800334a:	6165      	str	r5, [r4, #20]
 800334c:	444e      	add	r6, r9
 800334e:	eba5 0509 	sub.w	r5, r5, r9
 8003352:	6026      	str	r6, [r4, #0]
 8003354:	60a5      	str	r5, [r4, #8]
 8003356:	463e      	mov	r6, r7
 8003358:	42be      	cmp	r6, r7
 800335a:	d900      	bls.n	800335e <__ssputs_r+0x86>
 800335c:	463e      	mov	r6, r7
 800335e:	4632      	mov	r2, r6
 8003360:	6820      	ldr	r0, [r4, #0]
 8003362:	4641      	mov	r1, r8
 8003364:	f000 fab6 	bl	80038d4 <memmove>
 8003368:	68a3      	ldr	r3, [r4, #8]
 800336a:	6822      	ldr	r2, [r4, #0]
 800336c:	1b9b      	subs	r3, r3, r6
 800336e:	4432      	add	r2, r6
 8003370:	60a3      	str	r3, [r4, #8]
 8003372:	6022      	str	r2, [r4, #0]
 8003374:	2000      	movs	r0, #0
 8003376:	e7db      	b.n	8003330 <__ssputs_r+0x58>
 8003378:	462a      	mov	r2, r5
 800337a:	f000 fb6f 	bl	8003a5c <_realloc_r>
 800337e:	4606      	mov	r6, r0
 8003380:	2800      	cmp	r0, #0
 8003382:	d1e1      	bne.n	8003348 <__ssputs_r+0x70>
 8003384:	6921      	ldr	r1, [r4, #16]
 8003386:	4650      	mov	r0, sl
 8003388:	f000 fabe 	bl	8003908 <_free_r>
 800338c:	e7c7      	b.n	800331e <__ssputs_r+0x46>
	...

08003390 <_svfiprintf_r>:
 8003390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003394:	4698      	mov	r8, r3
 8003396:	898b      	ldrh	r3, [r1, #12]
 8003398:	061b      	lsls	r3, r3, #24
 800339a:	b09d      	sub	sp, #116	; 0x74
 800339c:	4607      	mov	r7, r0
 800339e:	460d      	mov	r5, r1
 80033a0:	4614      	mov	r4, r2
 80033a2:	d50e      	bpl.n	80033c2 <_svfiprintf_r+0x32>
 80033a4:	690b      	ldr	r3, [r1, #16]
 80033a6:	b963      	cbnz	r3, 80033c2 <_svfiprintf_r+0x32>
 80033a8:	2140      	movs	r1, #64	; 0x40
 80033aa:	f000 fafd 	bl	80039a8 <_malloc_r>
 80033ae:	6028      	str	r0, [r5, #0]
 80033b0:	6128      	str	r0, [r5, #16]
 80033b2:	b920      	cbnz	r0, 80033be <_svfiprintf_r+0x2e>
 80033b4:	230c      	movs	r3, #12
 80033b6:	603b      	str	r3, [r7, #0]
 80033b8:	f04f 30ff 	mov.w	r0, #4294967295
 80033bc:	e0d1      	b.n	8003562 <_svfiprintf_r+0x1d2>
 80033be:	2340      	movs	r3, #64	; 0x40
 80033c0:	616b      	str	r3, [r5, #20]
 80033c2:	2300      	movs	r3, #0
 80033c4:	9309      	str	r3, [sp, #36]	; 0x24
 80033c6:	2320      	movs	r3, #32
 80033c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80033cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80033d0:	2330      	movs	r3, #48	; 0x30
 80033d2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800357c <_svfiprintf_r+0x1ec>
 80033d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80033da:	f04f 0901 	mov.w	r9, #1
 80033de:	4623      	mov	r3, r4
 80033e0:	469a      	mov	sl, r3
 80033e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80033e6:	b10a      	cbz	r2, 80033ec <_svfiprintf_r+0x5c>
 80033e8:	2a25      	cmp	r2, #37	; 0x25
 80033ea:	d1f9      	bne.n	80033e0 <_svfiprintf_r+0x50>
 80033ec:	ebba 0b04 	subs.w	fp, sl, r4
 80033f0:	d00b      	beq.n	800340a <_svfiprintf_r+0x7a>
 80033f2:	465b      	mov	r3, fp
 80033f4:	4622      	mov	r2, r4
 80033f6:	4629      	mov	r1, r5
 80033f8:	4638      	mov	r0, r7
 80033fa:	f7ff ff6d 	bl	80032d8 <__ssputs_r>
 80033fe:	3001      	adds	r0, #1
 8003400:	f000 80aa 	beq.w	8003558 <_svfiprintf_r+0x1c8>
 8003404:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003406:	445a      	add	r2, fp
 8003408:	9209      	str	r2, [sp, #36]	; 0x24
 800340a:	f89a 3000 	ldrb.w	r3, [sl]
 800340e:	2b00      	cmp	r3, #0
 8003410:	f000 80a2 	beq.w	8003558 <_svfiprintf_r+0x1c8>
 8003414:	2300      	movs	r3, #0
 8003416:	f04f 32ff 	mov.w	r2, #4294967295
 800341a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800341e:	f10a 0a01 	add.w	sl, sl, #1
 8003422:	9304      	str	r3, [sp, #16]
 8003424:	9307      	str	r3, [sp, #28]
 8003426:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800342a:	931a      	str	r3, [sp, #104]	; 0x68
 800342c:	4654      	mov	r4, sl
 800342e:	2205      	movs	r2, #5
 8003430:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003434:	4851      	ldr	r0, [pc, #324]	; (800357c <_svfiprintf_r+0x1ec>)
 8003436:	f7fc fed3 	bl	80001e0 <memchr>
 800343a:	9a04      	ldr	r2, [sp, #16]
 800343c:	b9d8      	cbnz	r0, 8003476 <_svfiprintf_r+0xe6>
 800343e:	06d0      	lsls	r0, r2, #27
 8003440:	bf44      	itt	mi
 8003442:	2320      	movmi	r3, #32
 8003444:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003448:	0711      	lsls	r1, r2, #28
 800344a:	bf44      	itt	mi
 800344c:	232b      	movmi	r3, #43	; 0x2b
 800344e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003452:	f89a 3000 	ldrb.w	r3, [sl]
 8003456:	2b2a      	cmp	r3, #42	; 0x2a
 8003458:	d015      	beq.n	8003486 <_svfiprintf_r+0xf6>
 800345a:	9a07      	ldr	r2, [sp, #28]
 800345c:	4654      	mov	r4, sl
 800345e:	2000      	movs	r0, #0
 8003460:	f04f 0c0a 	mov.w	ip, #10
 8003464:	4621      	mov	r1, r4
 8003466:	f811 3b01 	ldrb.w	r3, [r1], #1
 800346a:	3b30      	subs	r3, #48	; 0x30
 800346c:	2b09      	cmp	r3, #9
 800346e:	d94e      	bls.n	800350e <_svfiprintf_r+0x17e>
 8003470:	b1b0      	cbz	r0, 80034a0 <_svfiprintf_r+0x110>
 8003472:	9207      	str	r2, [sp, #28]
 8003474:	e014      	b.n	80034a0 <_svfiprintf_r+0x110>
 8003476:	eba0 0308 	sub.w	r3, r0, r8
 800347a:	fa09 f303 	lsl.w	r3, r9, r3
 800347e:	4313      	orrs	r3, r2
 8003480:	9304      	str	r3, [sp, #16]
 8003482:	46a2      	mov	sl, r4
 8003484:	e7d2      	b.n	800342c <_svfiprintf_r+0x9c>
 8003486:	9b03      	ldr	r3, [sp, #12]
 8003488:	1d19      	adds	r1, r3, #4
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	9103      	str	r1, [sp, #12]
 800348e:	2b00      	cmp	r3, #0
 8003490:	bfbb      	ittet	lt
 8003492:	425b      	neglt	r3, r3
 8003494:	f042 0202 	orrlt.w	r2, r2, #2
 8003498:	9307      	strge	r3, [sp, #28]
 800349a:	9307      	strlt	r3, [sp, #28]
 800349c:	bfb8      	it	lt
 800349e:	9204      	strlt	r2, [sp, #16]
 80034a0:	7823      	ldrb	r3, [r4, #0]
 80034a2:	2b2e      	cmp	r3, #46	; 0x2e
 80034a4:	d10c      	bne.n	80034c0 <_svfiprintf_r+0x130>
 80034a6:	7863      	ldrb	r3, [r4, #1]
 80034a8:	2b2a      	cmp	r3, #42	; 0x2a
 80034aa:	d135      	bne.n	8003518 <_svfiprintf_r+0x188>
 80034ac:	9b03      	ldr	r3, [sp, #12]
 80034ae:	1d1a      	adds	r2, r3, #4
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	9203      	str	r2, [sp, #12]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	bfb8      	it	lt
 80034b8:	f04f 33ff 	movlt.w	r3, #4294967295
 80034bc:	3402      	adds	r4, #2
 80034be:	9305      	str	r3, [sp, #20]
 80034c0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800358c <_svfiprintf_r+0x1fc>
 80034c4:	7821      	ldrb	r1, [r4, #0]
 80034c6:	2203      	movs	r2, #3
 80034c8:	4650      	mov	r0, sl
 80034ca:	f7fc fe89 	bl	80001e0 <memchr>
 80034ce:	b140      	cbz	r0, 80034e2 <_svfiprintf_r+0x152>
 80034d0:	2340      	movs	r3, #64	; 0x40
 80034d2:	eba0 000a 	sub.w	r0, r0, sl
 80034d6:	fa03 f000 	lsl.w	r0, r3, r0
 80034da:	9b04      	ldr	r3, [sp, #16]
 80034dc:	4303      	orrs	r3, r0
 80034de:	3401      	adds	r4, #1
 80034e0:	9304      	str	r3, [sp, #16]
 80034e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034e6:	4826      	ldr	r0, [pc, #152]	; (8003580 <_svfiprintf_r+0x1f0>)
 80034e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80034ec:	2206      	movs	r2, #6
 80034ee:	f7fc fe77 	bl	80001e0 <memchr>
 80034f2:	2800      	cmp	r0, #0
 80034f4:	d038      	beq.n	8003568 <_svfiprintf_r+0x1d8>
 80034f6:	4b23      	ldr	r3, [pc, #140]	; (8003584 <_svfiprintf_r+0x1f4>)
 80034f8:	bb1b      	cbnz	r3, 8003542 <_svfiprintf_r+0x1b2>
 80034fa:	9b03      	ldr	r3, [sp, #12]
 80034fc:	3307      	adds	r3, #7
 80034fe:	f023 0307 	bic.w	r3, r3, #7
 8003502:	3308      	adds	r3, #8
 8003504:	9303      	str	r3, [sp, #12]
 8003506:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003508:	4433      	add	r3, r6
 800350a:	9309      	str	r3, [sp, #36]	; 0x24
 800350c:	e767      	b.n	80033de <_svfiprintf_r+0x4e>
 800350e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003512:	460c      	mov	r4, r1
 8003514:	2001      	movs	r0, #1
 8003516:	e7a5      	b.n	8003464 <_svfiprintf_r+0xd4>
 8003518:	2300      	movs	r3, #0
 800351a:	3401      	adds	r4, #1
 800351c:	9305      	str	r3, [sp, #20]
 800351e:	4619      	mov	r1, r3
 8003520:	f04f 0c0a 	mov.w	ip, #10
 8003524:	4620      	mov	r0, r4
 8003526:	f810 2b01 	ldrb.w	r2, [r0], #1
 800352a:	3a30      	subs	r2, #48	; 0x30
 800352c:	2a09      	cmp	r2, #9
 800352e:	d903      	bls.n	8003538 <_svfiprintf_r+0x1a8>
 8003530:	2b00      	cmp	r3, #0
 8003532:	d0c5      	beq.n	80034c0 <_svfiprintf_r+0x130>
 8003534:	9105      	str	r1, [sp, #20]
 8003536:	e7c3      	b.n	80034c0 <_svfiprintf_r+0x130>
 8003538:	fb0c 2101 	mla	r1, ip, r1, r2
 800353c:	4604      	mov	r4, r0
 800353e:	2301      	movs	r3, #1
 8003540:	e7f0      	b.n	8003524 <_svfiprintf_r+0x194>
 8003542:	ab03      	add	r3, sp, #12
 8003544:	9300      	str	r3, [sp, #0]
 8003546:	462a      	mov	r2, r5
 8003548:	4b0f      	ldr	r3, [pc, #60]	; (8003588 <_svfiprintf_r+0x1f8>)
 800354a:	a904      	add	r1, sp, #16
 800354c:	4638      	mov	r0, r7
 800354e:	f3af 8000 	nop.w
 8003552:	1c42      	adds	r2, r0, #1
 8003554:	4606      	mov	r6, r0
 8003556:	d1d6      	bne.n	8003506 <_svfiprintf_r+0x176>
 8003558:	89ab      	ldrh	r3, [r5, #12]
 800355a:	065b      	lsls	r3, r3, #25
 800355c:	f53f af2c 	bmi.w	80033b8 <_svfiprintf_r+0x28>
 8003560:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003562:	b01d      	add	sp, #116	; 0x74
 8003564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003568:	ab03      	add	r3, sp, #12
 800356a:	9300      	str	r3, [sp, #0]
 800356c:	462a      	mov	r2, r5
 800356e:	4b06      	ldr	r3, [pc, #24]	; (8003588 <_svfiprintf_r+0x1f8>)
 8003570:	a904      	add	r1, sp, #16
 8003572:	4638      	mov	r0, r7
 8003574:	f000 f87a 	bl	800366c <_printf_i>
 8003578:	e7eb      	b.n	8003552 <_svfiprintf_r+0x1c2>
 800357a:	bf00      	nop
 800357c:	08003b94 	.word	0x08003b94
 8003580:	08003b9e 	.word	0x08003b9e
 8003584:	00000000 	.word	0x00000000
 8003588:	080032d9 	.word	0x080032d9
 800358c:	08003b9a 	.word	0x08003b9a

08003590 <_printf_common>:
 8003590:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003594:	4616      	mov	r6, r2
 8003596:	4699      	mov	r9, r3
 8003598:	688a      	ldr	r2, [r1, #8]
 800359a:	690b      	ldr	r3, [r1, #16]
 800359c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80035a0:	4293      	cmp	r3, r2
 80035a2:	bfb8      	it	lt
 80035a4:	4613      	movlt	r3, r2
 80035a6:	6033      	str	r3, [r6, #0]
 80035a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80035ac:	4607      	mov	r7, r0
 80035ae:	460c      	mov	r4, r1
 80035b0:	b10a      	cbz	r2, 80035b6 <_printf_common+0x26>
 80035b2:	3301      	adds	r3, #1
 80035b4:	6033      	str	r3, [r6, #0]
 80035b6:	6823      	ldr	r3, [r4, #0]
 80035b8:	0699      	lsls	r1, r3, #26
 80035ba:	bf42      	ittt	mi
 80035bc:	6833      	ldrmi	r3, [r6, #0]
 80035be:	3302      	addmi	r3, #2
 80035c0:	6033      	strmi	r3, [r6, #0]
 80035c2:	6825      	ldr	r5, [r4, #0]
 80035c4:	f015 0506 	ands.w	r5, r5, #6
 80035c8:	d106      	bne.n	80035d8 <_printf_common+0x48>
 80035ca:	f104 0a19 	add.w	sl, r4, #25
 80035ce:	68e3      	ldr	r3, [r4, #12]
 80035d0:	6832      	ldr	r2, [r6, #0]
 80035d2:	1a9b      	subs	r3, r3, r2
 80035d4:	42ab      	cmp	r3, r5
 80035d6:	dc26      	bgt.n	8003626 <_printf_common+0x96>
 80035d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80035dc:	1e13      	subs	r3, r2, #0
 80035de:	6822      	ldr	r2, [r4, #0]
 80035e0:	bf18      	it	ne
 80035e2:	2301      	movne	r3, #1
 80035e4:	0692      	lsls	r2, r2, #26
 80035e6:	d42b      	bmi.n	8003640 <_printf_common+0xb0>
 80035e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80035ec:	4649      	mov	r1, r9
 80035ee:	4638      	mov	r0, r7
 80035f0:	47c0      	blx	r8
 80035f2:	3001      	adds	r0, #1
 80035f4:	d01e      	beq.n	8003634 <_printf_common+0xa4>
 80035f6:	6823      	ldr	r3, [r4, #0]
 80035f8:	68e5      	ldr	r5, [r4, #12]
 80035fa:	6832      	ldr	r2, [r6, #0]
 80035fc:	f003 0306 	and.w	r3, r3, #6
 8003600:	2b04      	cmp	r3, #4
 8003602:	bf08      	it	eq
 8003604:	1aad      	subeq	r5, r5, r2
 8003606:	68a3      	ldr	r3, [r4, #8]
 8003608:	6922      	ldr	r2, [r4, #16]
 800360a:	bf0c      	ite	eq
 800360c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003610:	2500      	movne	r5, #0
 8003612:	4293      	cmp	r3, r2
 8003614:	bfc4      	itt	gt
 8003616:	1a9b      	subgt	r3, r3, r2
 8003618:	18ed      	addgt	r5, r5, r3
 800361a:	2600      	movs	r6, #0
 800361c:	341a      	adds	r4, #26
 800361e:	42b5      	cmp	r5, r6
 8003620:	d11a      	bne.n	8003658 <_printf_common+0xc8>
 8003622:	2000      	movs	r0, #0
 8003624:	e008      	b.n	8003638 <_printf_common+0xa8>
 8003626:	2301      	movs	r3, #1
 8003628:	4652      	mov	r2, sl
 800362a:	4649      	mov	r1, r9
 800362c:	4638      	mov	r0, r7
 800362e:	47c0      	blx	r8
 8003630:	3001      	adds	r0, #1
 8003632:	d103      	bne.n	800363c <_printf_common+0xac>
 8003634:	f04f 30ff 	mov.w	r0, #4294967295
 8003638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800363c:	3501      	adds	r5, #1
 800363e:	e7c6      	b.n	80035ce <_printf_common+0x3e>
 8003640:	18e1      	adds	r1, r4, r3
 8003642:	1c5a      	adds	r2, r3, #1
 8003644:	2030      	movs	r0, #48	; 0x30
 8003646:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800364a:	4422      	add	r2, r4
 800364c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003650:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003654:	3302      	adds	r3, #2
 8003656:	e7c7      	b.n	80035e8 <_printf_common+0x58>
 8003658:	2301      	movs	r3, #1
 800365a:	4622      	mov	r2, r4
 800365c:	4649      	mov	r1, r9
 800365e:	4638      	mov	r0, r7
 8003660:	47c0      	blx	r8
 8003662:	3001      	adds	r0, #1
 8003664:	d0e6      	beq.n	8003634 <_printf_common+0xa4>
 8003666:	3601      	adds	r6, #1
 8003668:	e7d9      	b.n	800361e <_printf_common+0x8e>
	...

0800366c <_printf_i>:
 800366c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003670:	460c      	mov	r4, r1
 8003672:	4691      	mov	r9, r2
 8003674:	7e27      	ldrb	r7, [r4, #24]
 8003676:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003678:	2f78      	cmp	r7, #120	; 0x78
 800367a:	4680      	mov	r8, r0
 800367c:	469a      	mov	sl, r3
 800367e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003682:	d807      	bhi.n	8003694 <_printf_i+0x28>
 8003684:	2f62      	cmp	r7, #98	; 0x62
 8003686:	d80a      	bhi.n	800369e <_printf_i+0x32>
 8003688:	2f00      	cmp	r7, #0
 800368a:	f000 80d8 	beq.w	800383e <_printf_i+0x1d2>
 800368e:	2f58      	cmp	r7, #88	; 0x58
 8003690:	f000 80a3 	beq.w	80037da <_printf_i+0x16e>
 8003694:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003698:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800369c:	e03a      	b.n	8003714 <_printf_i+0xa8>
 800369e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80036a2:	2b15      	cmp	r3, #21
 80036a4:	d8f6      	bhi.n	8003694 <_printf_i+0x28>
 80036a6:	a001      	add	r0, pc, #4	; (adr r0, 80036ac <_printf_i+0x40>)
 80036a8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80036ac:	08003705 	.word	0x08003705
 80036b0:	08003719 	.word	0x08003719
 80036b4:	08003695 	.word	0x08003695
 80036b8:	08003695 	.word	0x08003695
 80036bc:	08003695 	.word	0x08003695
 80036c0:	08003695 	.word	0x08003695
 80036c4:	08003719 	.word	0x08003719
 80036c8:	08003695 	.word	0x08003695
 80036cc:	08003695 	.word	0x08003695
 80036d0:	08003695 	.word	0x08003695
 80036d4:	08003695 	.word	0x08003695
 80036d8:	08003825 	.word	0x08003825
 80036dc:	08003749 	.word	0x08003749
 80036e0:	08003807 	.word	0x08003807
 80036e4:	08003695 	.word	0x08003695
 80036e8:	08003695 	.word	0x08003695
 80036ec:	08003847 	.word	0x08003847
 80036f0:	08003695 	.word	0x08003695
 80036f4:	08003749 	.word	0x08003749
 80036f8:	08003695 	.word	0x08003695
 80036fc:	08003695 	.word	0x08003695
 8003700:	0800380f 	.word	0x0800380f
 8003704:	680b      	ldr	r3, [r1, #0]
 8003706:	1d1a      	adds	r2, r3, #4
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	600a      	str	r2, [r1, #0]
 800370c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003710:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003714:	2301      	movs	r3, #1
 8003716:	e0a3      	b.n	8003860 <_printf_i+0x1f4>
 8003718:	6825      	ldr	r5, [r4, #0]
 800371a:	6808      	ldr	r0, [r1, #0]
 800371c:	062e      	lsls	r6, r5, #24
 800371e:	f100 0304 	add.w	r3, r0, #4
 8003722:	d50a      	bpl.n	800373a <_printf_i+0xce>
 8003724:	6805      	ldr	r5, [r0, #0]
 8003726:	600b      	str	r3, [r1, #0]
 8003728:	2d00      	cmp	r5, #0
 800372a:	da03      	bge.n	8003734 <_printf_i+0xc8>
 800372c:	232d      	movs	r3, #45	; 0x2d
 800372e:	426d      	negs	r5, r5
 8003730:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003734:	485e      	ldr	r0, [pc, #376]	; (80038b0 <_printf_i+0x244>)
 8003736:	230a      	movs	r3, #10
 8003738:	e019      	b.n	800376e <_printf_i+0x102>
 800373a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800373e:	6805      	ldr	r5, [r0, #0]
 8003740:	600b      	str	r3, [r1, #0]
 8003742:	bf18      	it	ne
 8003744:	b22d      	sxthne	r5, r5
 8003746:	e7ef      	b.n	8003728 <_printf_i+0xbc>
 8003748:	680b      	ldr	r3, [r1, #0]
 800374a:	6825      	ldr	r5, [r4, #0]
 800374c:	1d18      	adds	r0, r3, #4
 800374e:	6008      	str	r0, [r1, #0]
 8003750:	0628      	lsls	r0, r5, #24
 8003752:	d501      	bpl.n	8003758 <_printf_i+0xec>
 8003754:	681d      	ldr	r5, [r3, #0]
 8003756:	e002      	b.n	800375e <_printf_i+0xf2>
 8003758:	0669      	lsls	r1, r5, #25
 800375a:	d5fb      	bpl.n	8003754 <_printf_i+0xe8>
 800375c:	881d      	ldrh	r5, [r3, #0]
 800375e:	4854      	ldr	r0, [pc, #336]	; (80038b0 <_printf_i+0x244>)
 8003760:	2f6f      	cmp	r7, #111	; 0x6f
 8003762:	bf0c      	ite	eq
 8003764:	2308      	moveq	r3, #8
 8003766:	230a      	movne	r3, #10
 8003768:	2100      	movs	r1, #0
 800376a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800376e:	6866      	ldr	r6, [r4, #4]
 8003770:	60a6      	str	r6, [r4, #8]
 8003772:	2e00      	cmp	r6, #0
 8003774:	bfa2      	ittt	ge
 8003776:	6821      	ldrge	r1, [r4, #0]
 8003778:	f021 0104 	bicge.w	r1, r1, #4
 800377c:	6021      	strge	r1, [r4, #0]
 800377e:	b90d      	cbnz	r5, 8003784 <_printf_i+0x118>
 8003780:	2e00      	cmp	r6, #0
 8003782:	d04d      	beq.n	8003820 <_printf_i+0x1b4>
 8003784:	4616      	mov	r6, r2
 8003786:	fbb5 f1f3 	udiv	r1, r5, r3
 800378a:	fb03 5711 	mls	r7, r3, r1, r5
 800378e:	5dc7      	ldrb	r7, [r0, r7]
 8003790:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003794:	462f      	mov	r7, r5
 8003796:	42bb      	cmp	r3, r7
 8003798:	460d      	mov	r5, r1
 800379a:	d9f4      	bls.n	8003786 <_printf_i+0x11a>
 800379c:	2b08      	cmp	r3, #8
 800379e:	d10b      	bne.n	80037b8 <_printf_i+0x14c>
 80037a0:	6823      	ldr	r3, [r4, #0]
 80037a2:	07df      	lsls	r7, r3, #31
 80037a4:	d508      	bpl.n	80037b8 <_printf_i+0x14c>
 80037a6:	6923      	ldr	r3, [r4, #16]
 80037a8:	6861      	ldr	r1, [r4, #4]
 80037aa:	4299      	cmp	r1, r3
 80037ac:	bfde      	ittt	le
 80037ae:	2330      	movle	r3, #48	; 0x30
 80037b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80037b4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80037b8:	1b92      	subs	r2, r2, r6
 80037ba:	6122      	str	r2, [r4, #16]
 80037bc:	f8cd a000 	str.w	sl, [sp]
 80037c0:	464b      	mov	r3, r9
 80037c2:	aa03      	add	r2, sp, #12
 80037c4:	4621      	mov	r1, r4
 80037c6:	4640      	mov	r0, r8
 80037c8:	f7ff fee2 	bl	8003590 <_printf_common>
 80037cc:	3001      	adds	r0, #1
 80037ce:	d14c      	bne.n	800386a <_printf_i+0x1fe>
 80037d0:	f04f 30ff 	mov.w	r0, #4294967295
 80037d4:	b004      	add	sp, #16
 80037d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037da:	4835      	ldr	r0, [pc, #212]	; (80038b0 <_printf_i+0x244>)
 80037dc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80037e0:	6823      	ldr	r3, [r4, #0]
 80037e2:	680e      	ldr	r6, [r1, #0]
 80037e4:	061f      	lsls	r7, r3, #24
 80037e6:	f856 5b04 	ldr.w	r5, [r6], #4
 80037ea:	600e      	str	r6, [r1, #0]
 80037ec:	d514      	bpl.n	8003818 <_printf_i+0x1ac>
 80037ee:	07d9      	lsls	r1, r3, #31
 80037f0:	bf44      	itt	mi
 80037f2:	f043 0320 	orrmi.w	r3, r3, #32
 80037f6:	6023      	strmi	r3, [r4, #0]
 80037f8:	b91d      	cbnz	r5, 8003802 <_printf_i+0x196>
 80037fa:	6823      	ldr	r3, [r4, #0]
 80037fc:	f023 0320 	bic.w	r3, r3, #32
 8003800:	6023      	str	r3, [r4, #0]
 8003802:	2310      	movs	r3, #16
 8003804:	e7b0      	b.n	8003768 <_printf_i+0xfc>
 8003806:	6823      	ldr	r3, [r4, #0]
 8003808:	f043 0320 	orr.w	r3, r3, #32
 800380c:	6023      	str	r3, [r4, #0]
 800380e:	2378      	movs	r3, #120	; 0x78
 8003810:	4828      	ldr	r0, [pc, #160]	; (80038b4 <_printf_i+0x248>)
 8003812:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003816:	e7e3      	b.n	80037e0 <_printf_i+0x174>
 8003818:	065e      	lsls	r6, r3, #25
 800381a:	bf48      	it	mi
 800381c:	b2ad      	uxthmi	r5, r5
 800381e:	e7e6      	b.n	80037ee <_printf_i+0x182>
 8003820:	4616      	mov	r6, r2
 8003822:	e7bb      	b.n	800379c <_printf_i+0x130>
 8003824:	680b      	ldr	r3, [r1, #0]
 8003826:	6826      	ldr	r6, [r4, #0]
 8003828:	6960      	ldr	r0, [r4, #20]
 800382a:	1d1d      	adds	r5, r3, #4
 800382c:	600d      	str	r5, [r1, #0]
 800382e:	0635      	lsls	r5, r6, #24
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	d501      	bpl.n	8003838 <_printf_i+0x1cc>
 8003834:	6018      	str	r0, [r3, #0]
 8003836:	e002      	b.n	800383e <_printf_i+0x1d2>
 8003838:	0671      	lsls	r1, r6, #25
 800383a:	d5fb      	bpl.n	8003834 <_printf_i+0x1c8>
 800383c:	8018      	strh	r0, [r3, #0]
 800383e:	2300      	movs	r3, #0
 8003840:	6123      	str	r3, [r4, #16]
 8003842:	4616      	mov	r6, r2
 8003844:	e7ba      	b.n	80037bc <_printf_i+0x150>
 8003846:	680b      	ldr	r3, [r1, #0]
 8003848:	1d1a      	adds	r2, r3, #4
 800384a:	600a      	str	r2, [r1, #0]
 800384c:	681e      	ldr	r6, [r3, #0]
 800384e:	6862      	ldr	r2, [r4, #4]
 8003850:	2100      	movs	r1, #0
 8003852:	4630      	mov	r0, r6
 8003854:	f7fc fcc4 	bl	80001e0 <memchr>
 8003858:	b108      	cbz	r0, 800385e <_printf_i+0x1f2>
 800385a:	1b80      	subs	r0, r0, r6
 800385c:	6060      	str	r0, [r4, #4]
 800385e:	6863      	ldr	r3, [r4, #4]
 8003860:	6123      	str	r3, [r4, #16]
 8003862:	2300      	movs	r3, #0
 8003864:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003868:	e7a8      	b.n	80037bc <_printf_i+0x150>
 800386a:	6923      	ldr	r3, [r4, #16]
 800386c:	4632      	mov	r2, r6
 800386e:	4649      	mov	r1, r9
 8003870:	4640      	mov	r0, r8
 8003872:	47d0      	blx	sl
 8003874:	3001      	adds	r0, #1
 8003876:	d0ab      	beq.n	80037d0 <_printf_i+0x164>
 8003878:	6823      	ldr	r3, [r4, #0]
 800387a:	079b      	lsls	r3, r3, #30
 800387c:	d413      	bmi.n	80038a6 <_printf_i+0x23a>
 800387e:	68e0      	ldr	r0, [r4, #12]
 8003880:	9b03      	ldr	r3, [sp, #12]
 8003882:	4298      	cmp	r0, r3
 8003884:	bfb8      	it	lt
 8003886:	4618      	movlt	r0, r3
 8003888:	e7a4      	b.n	80037d4 <_printf_i+0x168>
 800388a:	2301      	movs	r3, #1
 800388c:	4632      	mov	r2, r6
 800388e:	4649      	mov	r1, r9
 8003890:	4640      	mov	r0, r8
 8003892:	47d0      	blx	sl
 8003894:	3001      	adds	r0, #1
 8003896:	d09b      	beq.n	80037d0 <_printf_i+0x164>
 8003898:	3501      	adds	r5, #1
 800389a:	68e3      	ldr	r3, [r4, #12]
 800389c:	9903      	ldr	r1, [sp, #12]
 800389e:	1a5b      	subs	r3, r3, r1
 80038a0:	42ab      	cmp	r3, r5
 80038a2:	dcf2      	bgt.n	800388a <_printf_i+0x21e>
 80038a4:	e7eb      	b.n	800387e <_printf_i+0x212>
 80038a6:	2500      	movs	r5, #0
 80038a8:	f104 0619 	add.w	r6, r4, #25
 80038ac:	e7f5      	b.n	800389a <_printf_i+0x22e>
 80038ae:	bf00      	nop
 80038b0:	08003ba5 	.word	0x08003ba5
 80038b4:	08003bb6 	.word	0x08003bb6

080038b8 <memcpy>:
 80038b8:	440a      	add	r2, r1
 80038ba:	4291      	cmp	r1, r2
 80038bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80038c0:	d100      	bne.n	80038c4 <memcpy+0xc>
 80038c2:	4770      	bx	lr
 80038c4:	b510      	push	{r4, lr}
 80038c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80038ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80038ce:	4291      	cmp	r1, r2
 80038d0:	d1f9      	bne.n	80038c6 <memcpy+0xe>
 80038d2:	bd10      	pop	{r4, pc}

080038d4 <memmove>:
 80038d4:	4288      	cmp	r0, r1
 80038d6:	b510      	push	{r4, lr}
 80038d8:	eb01 0402 	add.w	r4, r1, r2
 80038dc:	d902      	bls.n	80038e4 <memmove+0x10>
 80038de:	4284      	cmp	r4, r0
 80038e0:	4623      	mov	r3, r4
 80038e2:	d807      	bhi.n	80038f4 <memmove+0x20>
 80038e4:	1e43      	subs	r3, r0, #1
 80038e6:	42a1      	cmp	r1, r4
 80038e8:	d008      	beq.n	80038fc <memmove+0x28>
 80038ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80038ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80038f2:	e7f8      	b.n	80038e6 <memmove+0x12>
 80038f4:	4402      	add	r2, r0
 80038f6:	4601      	mov	r1, r0
 80038f8:	428a      	cmp	r2, r1
 80038fa:	d100      	bne.n	80038fe <memmove+0x2a>
 80038fc:	bd10      	pop	{r4, pc}
 80038fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003902:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003906:	e7f7      	b.n	80038f8 <memmove+0x24>

08003908 <_free_r>:
 8003908:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800390a:	2900      	cmp	r1, #0
 800390c:	d048      	beq.n	80039a0 <_free_r+0x98>
 800390e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003912:	9001      	str	r0, [sp, #4]
 8003914:	2b00      	cmp	r3, #0
 8003916:	f1a1 0404 	sub.w	r4, r1, #4
 800391a:	bfb8      	it	lt
 800391c:	18e4      	addlt	r4, r4, r3
 800391e:	f000 f8d3 	bl	8003ac8 <__malloc_lock>
 8003922:	4a20      	ldr	r2, [pc, #128]	; (80039a4 <_free_r+0x9c>)
 8003924:	9801      	ldr	r0, [sp, #4]
 8003926:	6813      	ldr	r3, [r2, #0]
 8003928:	4615      	mov	r5, r2
 800392a:	b933      	cbnz	r3, 800393a <_free_r+0x32>
 800392c:	6063      	str	r3, [r4, #4]
 800392e:	6014      	str	r4, [r2, #0]
 8003930:	b003      	add	sp, #12
 8003932:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003936:	f000 b8cd 	b.w	8003ad4 <__malloc_unlock>
 800393a:	42a3      	cmp	r3, r4
 800393c:	d90b      	bls.n	8003956 <_free_r+0x4e>
 800393e:	6821      	ldr	r1, [r4, #0]
 8003940:	1862      	adds	r2, r4, r1
 8003942:	4293      	cmp	r3, r2
 8003944:	bf04      	itt	eq
 8003946:	681a      	ldreq	r2, [r3, #0]
 8003948:	685b      	ldreq	r3, [r3, #4]
 800394a:	6063      	str	r3, [r4, #4]
 800394c:	bf04      	itt	eq
 800394e:	1852      	addeq	r2, r2, r1
 8003950:	6022      	streq	r2, [r4, #0]
 8003952:	602c      	str	r4, [r5, #0]
 8003954:	e7ec      	b.n	8003930 <_free_r+0x28>
 8003956:	461a      	mov	r2, r3
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	b10b      	cbz	r3, 8003960 <_free_r+0x58>
 800395c:	42a3      	cmp	r3, r4
 800395e:	d9fa      	bls.n	8003956 <_free_r+0x4e>
 8003960:	6811      	ldr	r1, [r2, #0]
 8003962:	1855      	adds	r5, r2, r1
 8003964:	42a5      	cmp	r5, r4
 8003966:	d10b      	bne.n	8003980 <_free_r+0x78>
 8003968:	6824      	ldr	r4, [r4, #0]
 800396a:	4421      	add	r1, r4
 800396c:	1854      	adds	r4, r2, r1
 800396e:	42a3      	cmp	r3, r4
 8003970:	6011      	str	r1, [r2, #0]
 8003972:	d1dd      	bne.n	8003930 <_free_r+0x28>
 8003974:	681c      	ldr	r4, [r3, #0]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	6053      	str	r3, [r2, #4]
 800397a:	4421      	add	r1, r4
 800397c:	6011      	str	r1, [r2, #0]
 800397e:	e7d7      	b.n	8003930 <_free_r+0x28>
 8003980:	d902      	bls.n	8003988 <_free_r+0x80>
 8003982:	230c      	movs	r3, #12
 8003984:	6003      	str	r3, [r0, #0]
 8003986:	e7d3      	b.n	8003930 <_free_r+0x28>
 8003988:	6825      	ldr	r5, [r4, #0]
 800398a:	1961      	adds	r1, r4, r5
 800398c:	428b      	cmp	r3, r1
 800398e:	bf04      	itt	eq
 8003990:	6819      	ldreq	r1, [r3, #0]
 8003992:	685b      	ldreq	r3, [r3, #4]
 8003994:	6063      	str	r3, [r4, #4]
 8003996:	bf04      	itt	eq
 8003998:	1949      	addeq	r1, r1, r5
 800399a:	6021      	streq	r1, [r4, #0]
 800399c:	6054      	str	r4, [r2, #4]
 800399e:	e7c7      	b.n	8003930 <_free_r+0x28>
 80039a0:	b003      	add	sp, #12
 80039a2:	bd30      	pop	{r4, r5, pc}
 80039a4:	20000098 	.word	0x20000098

080039a8 <_malloc_r>:
 80039a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039aa:	1ccd      	adds	r5, r1, #3
 80039ac:	f025 0503 	bic.w	r5, r5, #3
 80039b0:	3508      	adds	r5, #8
 80039b2:	2d0c      	cmp	r5, #12
 80039b4:	bf38      	it	cc
 80039b6:	250c      	movcc	r5, #12
 80039b8:	2d00      	cmp	r5, #0
 80039ba:	4606      	mov	r6, r0
 80039bc:	db01      	blt.n	80039c2 <_malloc_r+0x1a>
 80039be:	42a9      	cmp	r1, r5
 80039c0:	d903      	bls.n	80039ca <_malloc_r+0x22>
 80039c2:	230c      	movs	r3, #12
 80039c4:	6033      	str	r3, [r6, #0]
 80039c6:	2000      	movs	r0, #0
 80039c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039ca:	f000 f87d 	bl	8003ac8 <__malloc_lock>
 80039ce:	4921      	ldr	r1, [pc, #132]	; (8003a54 <_malloc_r+0xac>)
 80039d0:	680a      	ldr	r2, [r1, #0]
 80039d2:	4614      	mov	r4, r2
 80039d4:	b99c      	cbnz	r4, 80039fe <_malloc_r+0x56>
 80039d6:	4f20      	ldr	r7, [pc, #128]	; (8003a58 <_malloc_r+0xb0>)
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	b923      	cbnz	r3, 80039e6 <_malloc_r+0x3e>
 80039dc:	4621      	mov	r1, r4
 80039de:	4630      	mov	r0, r6
 80039e0:	f000 f862 	bl	8003aa8 <_sbrk_r>
 80039e4:	6038      	str	r0, [r7, #0]
 80039e6:	4629      	mov	r1, r5
 80039e8:	4630      	mov	r0, r6
 80039ea:	f000 f85d 	bl	8003aa8 <_sbrk_r>
 80039ee:	1c43      	adds	r3, r0, #1
 80039f0:	d123      	bne.n	8003a3a <_malloc_r+0x92>
 80039f2:	230c      	movs	r3, #12
 80039f4:	6033      	str	r3, [r6, #0]
 80039f6:	4630      	mov	r0, r6
 80039f8:	f000 f86c 	bl	8003ad4 <__malloc_unlock>
 80039fc:	e7e3      	b.n	80039c6 <_malloc_r+0x1e>
 80039fe:	6823      	ldr	r3, [r4, #0]
 8003a00:	1b5b      	subs	r3, r3, r5
 8003a02:	d417      	bmi.n	8003a34 <_malloc_r+0x8c>
 8003a04:	2b0b      	cmp	r3, #11
 8003a06:	d903      	bls.n	8003a10 <_malloc_r+0x68>
 8003a08:	6023      	str	r3, [r4, #0]
 8003a0a:	441c      	add	r4, r3
 8003a0c:	6025      	str	r5, [r4, #0]
 8003a0e:	e004      	b.n	8003a1a <_malloc_r+0x72>
 8003a10:	6863      	ldr	r3, [r4, #4]
 8003a12:	42a2      	cmp	r2, r4
 8003a14:	bf0c      	ite	eq
 8003a16:	600b      	streq	r3, [r1, #0]
 8003a18:	6053      	strne	r3, [r2, #4]
 8003a1a:	4630      	mov	r0, r6
 8003a1c:	f000 f85a 	bl	8003ad4 <__malloc_unlock>
 8003a20:	f104 000b 	add.w	r0, r4, #11
 8003a24:	1d23      	adds	r3, r4, #4
 8003a26:	f020 0007 	bic.w	r0, r0, #7
 8003a2a:	1ac2      	subs	r2, r0, r3
 8003a2c:	d0cc      	beq.n	80039c8 <_malloc_r+0x20>
 8003a2e:	1a1b      	subs	r3, r3, r0
 8003a30:	50a3      	str	r3, [r4, r2]
 8003a32:	e7c9      	b.n	80039c8 <_malloc_r+0x20>
 8003a34:	4622      	mov	r2, r4
 8003a36:	6864      	ldr	r4, [r4, #4]
 8003a38:	e7cc      	b.n	80039d4 <_malloc_r+0x2c>
 8003a3a:	1cc4      	adds	r4, r0, #3
 8003a3c:	f024 0403 	bic.w	r4, r4, #3
 8003a40:	42a0      	cmp	r0, r4
 8003a42:	d0e3      	beq.n	8003a0c <_malloc_r+0x64>
 8003a44:	1a21      	subs	r1, r4, r0
 8003a46:	4630      	mov	r0, r6
 8003a48:	f000 f82e 	bl	8003aa8 <_sbrk_r>
 8003a4c:	3001      	adds	r0, #1
 8003a4e:	d1dd      	bne.n	8003a0c <_malloc_r+0x64>
 8003a50:	e7cf      	b.n	80039f2 <_malloc_r+0x4a>
 8003a52:	bf00      	nop
 8003a54:	20000098 	.word	0x20000098
 8003a58:	2000009c 	.word	0x2000009c

08003a5c <_realloc_r>:
 8003a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a5e:	4607      	mov	r7, r0
 8003a60:	4614      	mov	r4, r2
 8003a62:	460e      	mov	r6, r1
 8003a64:	b921      	cbnz	r1, 8003a70 <_realloc_r+0x14>
 8003a66:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003a6a:	4611      	mov	r1, r2
 8003a6c:	f7ff bf9c 	b.w	80039a8 <_malloc_r>
 8003a70:	b922      	cbnz	r2, 8003a7c <_realloc_r+0x20>
 8003a72:	f7ff ff49 	bl	8003908 <_free_r>
 8003a76:	4625      	mov	r5, r4
 8003a78:	4628      	mov	r0, r5
 8003a7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a7c:	f000 f830 	bl	8003ae0 <_malloc_usable_size_r>
 8003a80:	42a0      	cmp	r0, r4
 8003a82:	d20f      	bcs.n	8003aa4 <_realloc_r+0x48>
 8003a84:	4621      	mov	r1, r4
 8003a86:	4638      	mov	r0, r7
 8003a88:	f7ff ff8e 	bl	80039a8 <_malloc_r>
 8003a8c:	4605      	mov	r5, r0
 8003a8e:	2800      	cmp	r0, #0
 8003a90:	d0f2      	beq.n	8003a78 <_realloc_r+0x1c>
 8003a92:	4631      	mov	r1, r6
 8003a94:	4622      	mov	r2, r4
 8003a96:	f7ff ff0f 	bl	80038b8 <memcpy>
 8003a9a:	4631      	mov	r1, r6
 8003a9c:	4638      	mov	r0, r7
 8003a9e:	f7ff ff33 	bl	8003908 <_free_r>
 8003aa2:	e7e9      	b.n	8003a78 <_realloc_r+0x1c>
 8003aa4:	4635      	mov	r5, r6
 8003aa6:	e7e7      	b.n	8003a78 <_realloc_r+0x1c>

08003aa8 <_sbrk_r>:
 8003aa8:	b538      	push	{r3, r4, r5, lr}
 8003aaa:	4d06      	ldr	r5, [pc, #24]	; (8003ac4 <_sbrk_r+0x1c>)
 8003aac:	2300      	movs	r3, #0
 8003aae:	4604      	mov	r4, r0
 8003ab0:	4608      	mov	r0, r1
 8003ab2:	602b      	str	r3, [r5, #0]
 8003ab4:	f7fd fa00 	bl	8000eb8 <_sbrk>
 8003ab8:	1c43      	adds	r3, r0, #1
 8003aba:	d102      	bne.n	8003ac2 <_sbrk_r+0x1a>
 8003abc:	682b      	ldr	r3, [r5, #0]
 8003abe:	b103      	cbz	r3, 8003ac2 <_sbrk_r+0x1a>
 8003ac0:	6023      	str	r3, [r4, #0]
 8003ac2:	bd38      	pop	{r3, r4, r5, pc}
 8003ac4:	2000015c 	.word	0x2000015c

08003ac8 <__malloc_lock>:
 8003ac8:	4801      	ldr	r0, [pc, #4]	; (8003ad0 <__malloc_lock+0x8>)
 8003aca:	f000 b811 	b.w	8003af0 <__retarget_lock_acquire_recursive>
 8003ace:	bf00      	nop
 8003ad0:	20000164 	.word	0x20000164

08003ad4 <__malloc_unlock>:
 8003ad4:	4801      	ldr	r0, [pc, #4]	; (8003adc <__malloc_unlock+0x8>)
 8003ad6:	f000 b80c 	b.w	8003af2 <__retarget_lock_release_recursive>
 8003ada:	bf00      	nop
 8003adc:	20000164 	.word	0x20000164

08003ae0 <_malloc_usable_size_r>:
 8003ae0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ae4:	1f18      	subs	r0, r3, #4
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	bfbc      	itt	lt
 8003aea:	580b      	ldrlt	r3, [r1, r0]
 8003aec:	18c0      	addlt	r0, r0, r3
 8003aee:	4770      	bx	lr

08003af0 <__retarget_lock_acquire_recursive>:
 8003af0:	4770      	bx	lr

08003af2 <__retarget_lock_release_recursive>:
 8003af2:	4770      	bx	lr

08003af4 <_init>:
 8003af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003af6:	bf00      	nop
 8003af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003afa:	bc08      	pop	{r3}
 8003afc:	469e      	mov	lr, r3
 8003afe:	4770      	bx	lr

08003b00 <_fini>:
 8003b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b02:	bf00      	nop
 8003b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b06:	bc08      	pop	{r3}
 8003b08:	469e      	mov	lr, r3
 8003b0a:	4770      	bx	lr
